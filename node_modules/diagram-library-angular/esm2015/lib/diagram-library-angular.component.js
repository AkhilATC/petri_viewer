import { __decorate } from "tslib";
import { Component, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import * as MindFusion from 'diagram-library';
let DiagramView = class DiagramView {
    constructor() {
        this.inplaceEdit = false;
        this.enabled = true;
        this.roundedLinks = false;
        this.routeLinks = false;
        this.showGrid = false;
        this.autoResize = MindFusion.Diagramming.AutoResize.None;
        this.behavior = MindFusion.Diagramming.Behavior.LinkShapes;
        this.linkShape = MindFusion.Diagramming.LinkShape.Polyline;
        this.showAnchors = MindFusion.Diagramming.ShowAnchors.Auto;
        this.defaultShape = "Rectangle";
        this.linkHeadShapeSize = 5;
        this.nodeCreated = new EventEmitter();
        this.initializeLink = new EventEmitter();
        this.initializeNode = new EventEmitter();
        this.linkClicked = new EventEmitter();
        this.linkCreated = new EventEmitter();
        this.linkDeleted = new EventEmitter();
        this.linkDoubleClicked = new EventEmitter();
        this.linkModified = new EventEmitter();
        this.linkPointed = new EventEmitter();
        this.linkTextEdited = new EventEmitter();
        this.nodeClicked = new EventEmitter();
        this.nodeDeleted = new EventEmitter();
        this.nodeDoubleClicked = new EventEmitter();
        this.nodeModified = new EventEmitter();
        this.nodePointed = new EventEmitter();
        this.nodeTextEdited = new EventEmitter();
        this.linkCreating = new EventEmitter();
        this.linkDeleting = new EventEmitter();
        this.linkModifying = new EventEmitter();
        this.nodeCreating = new EventEmitter();
        this.nodeDeleting = new EventEmitter();
        this.nodeModifying = new EventEmitter();
        this.containerChildAdded = new EventEmitter();
        this.containerChildAdding = new EventEmitter();
        this.containerChildRemoving = new EventEmitter();
        this.containerChildRemoved = new EventEmitter();
        this.containerFolded = new EventEmitter();
        this.containerUnfolded = new EventEmitter();
        this.treeExpanded = new EventEmitter();
        this.treeCollapsed = new EventEmitter();
        this.selectionModifying = new EventEmitter();
        this.repaint = new EventEmitter();
        this.sizeChanged = new EventEmitter();
        this.nodeSelected = new EventEmitter();
        this.nodeDeselected = new EventEmitter();
        this.linkSelected = new EventEmitter();
        this.linkDeselected = new EventEmitter();
        this.controlLoaded = new EventEmitter();
        this.hitTestAdjustmentHandles = new EventEmitter();
        this.drawAdjustmentHandles = new EventEmitter();
        this.clicked = new EventEmitter();
        this.enterInplaceEditMode = new EventEmitter();
        this.leaveInplaceEditMode = new EventEmitter();
        this.createEditControl = new EventEmitter();
        this.cellTextEdited = new EventEmitter();
        this.laneGridCellTextEdited = new EventEmitter();
        this.serializeTag = new EventEmitter();
        this.deserializeTag = new EventEmitter();
        this.tableColumnResizing = new EventEmitter();
        this.tableColumnResized = new EventEmitter();
        this.tableRowResizing = new EventEmitter();
        this.tableRowResized = new EventEmitter();
        this.nodePasted = new EventEmitter();
        this.linkPasted = new EventEmitter();
        this.headerStartResizing = new EventEmitter();
        this.headerResized = new EventEmitter();
        this.itemAdded = new EventEmitter();
        this.itemRemoved = new EventEmitter();
        this.animatedLayoutCompleted = new EventEmitter();
        this.hyperlinkClicked = new EventEmitter();
        this.expandButtonClicked = new EventEmitter();
    }
    ngOnInit() {
        // bind properties
        if (this.passedID === undefined)
            this.passedID = "diagram";
        this.canvas.nativeElement.id = this.passedID;
        MindFusion.AbstractionLayer.attachControl(this.diagram, document.getElementById(this.passedID));
        this.diagram.setAllowInplaceEdit(this.inplaceEdit);
        this.diagram.setAutoResize(this.autoResize);
        this.diagram.setBackBrush(this.backBrush);
        this.diagram.setBehavior(this.behavior);
        this.diagram.setDefaultShape(MindFusion.Diagramming.Shape.fromId(this.defaultShape));
        this.diagram.setEnabled(this.enabled);
        this.diagram.setLinkHeadShapeSize(this.linkHeadShapeSize);
        this.diagram.setLinkShape(this.linkShape);
        this.diagram.setRoundedLinks(this.roundedLinks);
        this.diagram.setRouteLinks(this.routeLinks);
        this.diagram.setShowAnchors(this.showAnchors);
        this.diagram.setShowGrid(this.showGrid);
        // bind events
        var events = MindFusion.Diagramming.Events;
        for (var v in events) {
            function addAndDelegate(event, prop) {
                prop.diagram.addEventListener(event, (sender, args) => {
                    let emitter = Reflect.get(prop, event);
                    emitter.emit({ sender, args });
                });
            }
            addAndDelegate(v, this);
        }
    }
    ngOnDestroy() {
        if (this.diagram) {
            this.diagram.dispose();
        }
    }
};
__decorate([
    ViewChild('canvas', { static: true })
], DiagramView.prototype, "canvas", void 0);
__decorate([
    Input('id')
], DiagramView.prototype, "passedID", void 0);
__decorate([
    Input("diagram")
], DiagramView.prototype, "diagram", void 0);
__decorate([
    Input("allowInplaceEdit")
], DiagramView.prototype, "inplaceEdit", void 0);
__decorate([
    Input("enabled")
], DiagramView.prototype, "enabled", void 0);
__decorate([
    Input("roundedLinks")
], DiagramView.prototype, "roundedLinks", void 0);
__decorate([
    Input("routeLinks")
], DiagramView.prototype, "routeLinks", void 0);
__decorate([
    Input("showGrid")
], DiagramView.prototype, "showGrid", void 0);
__decorate([
    Input("autoResize")
], DiagramView.prototype, "autoResize", void 0);
__decorate([
    Input("behavior")
], DiagramView.prototype, "behavior", void 0);
__decorate([
    Input("linkShape")
], DiagramView.prototype, "linkShape", void 0);
__decorate([
    Input("showAnchors")
], DiagramView.prototype, "showAnchors", void 0);
__decorate([
    Input("backBrush")
], DiagramView.prototype, "backBrush", void 0);
__decorate([
    Input("defaulShape")
], DiagramView.prototype, "defaultShape", void 0);
__decorate([
    Input("linkHeadShapeSize")
], DiagramView.prototype, "linkHeadShapeSize", void 0);
__decorate([
    Output("onNodeCreated")
], DiagramView.prototype, "nodeCreated", void 0);
__decorate([
    Output("onInitializeLink")
], DiagramView.prototype, "initializeLink", void 0);
__decorate([
    Output("onInitializeNode")
], DiagramView.prototype, "initializeNode", void 0);
__decorate([
    Output("onLinkClicked")
], DiagramView.prototype, "linkClicked", void 0);
__decorate([
    Output("onLinkCreated")
], DiagramView.prototype, "linkCreated", void 0);
__decorate([
    Output("onLinkDeleted")
], DiagramView.prototype, "linkDeleted", void 0);
__decorate([
    Output("onLinkDoubleClicked")
], DiagramView.prototype, "linkDoubleClicked", void 0);
__decorate([
    Output("onLinkModified")
], DiagramView.prototype, "linkModified", void 0);
__decorate([
    Output("onLinkPointed")
], DiagramView.prototype, "linkPointed", void 0);
__decorate([
    Output("onLinkTextEdited")
], DiagramView.prototype, "linkTextEdited", void 0);
__decorate([
    Output("onNodeClicked")
], DiagramView.prototype, "nodeClicked", void 0);
__decorate([
    Output("onNodeDeleted")
], DiagramView.prototype, "nodeDeleted", void 0);
__decorate([
    Output("onNodeDoubleClicked")
], DiagramView.prototype, "nodeDoubleClicked", void 0);
__decorate([
    Output("onNodeModified")
], DiagramView.prototype, "nodeModified", void 0);
__decorate([
    Output("onNodePointed")
], DiagramView.prototype, "nodePointed", void 0);
__decorate([
    Output("onNodeTextEdited")
], DiagramView.prototype, "nodeTextEdited", void 0);
__decorate([
    Output("onLinkCreating")
], DiagramView.prototype, "linkCreating", void 0);
__decorate([
    Output("onLinkDeleting")
], DiagramView.prototype, "linkDeleting", void 0);
__decorate([
    Output("onLinkModifying")
], DiagramView.prototype, "linkModifying", void 0);
__decorate([
    Output("onNodeCreating")
], DiagramView.prototype, "nodeCreating", void 0);
__decorate([
    Output("onNodeDeleting")
], DiagramView.prototype, "nodeDeleting", void 0);
__decorate([
    Output("onNodeModifying")
], DiagramView.prototype, "nodeModifying", void 0);
__decorate([
    Output("onContainerChildAdded")
], DiagramView.prototype, "containerChildAdded", void 0);
__decorate([
    Output("onContainerChildAdding")
], DiagramView.prototype, "containerChildAdding", void 0);
__decorate([
    Output("onContainerChildRemoving")
], DiagramView.prototype, "containerChildRemoving", void 0);
__decorate([
    Output("onContainerChildRemoved")
], DiagramView.prototype, "containerChildRemoved", void 0);
__decorate([
    Output("onContainerFolded")
], DiagramView.prototype, "containerFolded", void 0);
__decorate([
    Output("onContainerUnfolded")
], DiagramView.prototype, "containerUnfolded", void 0);
__decorate([
    Output("onTreeExpanded")
], DiagramView.prototype, "treeExpanded", void 0);
__decorate([
    Output("onTreeCollapsed")
], DiagramView.prototype, "treeCollapsed", void 0);
__decorate([
    Output("onSelectionModifying")
], DiagramView.prototype, "selectionModifying", void 0);
__decorate([
    Output("onRepaint")
], DiagramView.prototype, "repaint", void 0);
__decorate([
    Output("onSizeChanged")
], DiagramView.prototype, "sizeChanged", void 0);
__decorate([
    Output("onNodeSelected")
], DiagramView.prototype, "nodeSelected", void 0);
__decorate([
    Output("onNodeDeselected")
], DiagramView.prototype, "nodeDeselected", void 0);
__decorate([
    Output("onLinkSelected")
], DiagramView.prototype, "linkSelected", void 0);
__decorate([
    Output("onLinkDeselected")
], DiagramView.prototype, "linkDeselected", void 0);
__decorate([
    Output("onControlLoaded")
], DiagramView.prototype, "controlLoaded", void 0);
__decorate([
    Output("onHitTestAdjustmentHandles")
], DiagramView.prototype, "hitTestAdjustmentHandles", void 0);
__decorate([
    Output("onDrawAdjustmentHandles")
], DiagramView.prototype, "drawAdjustmentHandles", void 0);
__decorate([
    Output("onClicked")
], DiagramView.prototype, "clicked", void 0);
__decorate([
    Output("onEnterInplaceEditMode")
], DiagramView.prototype, "enterInplaceEditMode", void 0);
__decorate([
    Output("onLeaveInplaceEditMode")
], DiagramView.prototype, "leaveInplaceEditMode", void 0);
__decorate([
    Output("onCreateEditControl")
], DiagramView.prototype, "createEditControl", void 0);
__decorate([
    Output("onCellTextEdited")
], DiagramView.prototype, "cellTextEdited", void 0);
__decorate([
    Output("onLaneGridCellTextEdited")
], DiagramView.prototype, "laneGridCellTextEdited", void 0);
__decorate([
    Output("onSerializeTag")
], DiagramView.prototype, "serializeTag", void 0);
__decorate([
    Output("onDeserializeTag")
], DiagramView.prototype, "deserializeTag", void 0);
__decorate([
    Output("onTableColumnResizing")
], DiagramView.prototype, "tableColumnResizing", void 0);
__decorate([
    Output("onTableColumnResized")
], DiagramView.prototype, "tableColumnResized", void 0);
__decorate([
    Output("onTableRowResizing")
], DiagramView.prototype, "tableRowResizing", void 0);
__decorate([
    Output("onTableRowResized")
], DiagramView.prototype, "tableRowResized", void 0);
__decorate([
    Output("onNodePasted")
], DiagramView.prototype, "nodePasted", void 0);
__decorate([
    Output("onLinkPasted")
], DiagramView.prototype, "linkPasted", void 0);
__decorate([
    Output("onHeaderStartResizing")
], DiagramView.prototype, "headerStartResizing", void 0);
__decorate([
    Output("onHeaderResized")
], DiagramView.prototype, "headerResized", void 0);
__decorate([
    Output("onItemAdded")
], DiagramView.prototype, "itemAdded", void 0);
__decorate([
    Output("onItemRemoved")
], DiagramView.prototype, "itemRemoved", void 0);
__decorate([
    Output("onAnimatedLayoutCompleted")
], DiagramView.prototype, "animatedLayoutCompleted", void 0);
__decorate([
    Output("onHyperlinkClicked")
], DiagramView.prototype, "hyperlinkClicked", void 0);
__decorate([
    Output("onExpandButtonClicked")
], DiagramView.prototype, "expandButtonClicked", void 0);
DiagramView = __decorate([
    Component({
        selector: 'diagram-view',
        template: `
    <div style="position: absolute; overflow: auto; width: auto; height: auto; top: 0px; bottom: 0px; left: 0px; right: 0px; text-align: left;">
       <canvas #canvas></canvas>
    </div>`
    })
], DiagramView);
export { DiagramView };
//# sourceMappingURL=data:application/json;base64,