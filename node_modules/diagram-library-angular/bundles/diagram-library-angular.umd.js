(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('diagram-library'), require('mindfusion-common')) :
    typeof define === 'function' && define.amd ? define('diagram-library-angular', ['exports', '@angular/core', 'diagram-library', 'mindfusion-common'], factory) :
    (global = global || self, factory(global['diagram-library-angular'] = {}, global.ng.core, global.diagramLibrary, global.MCommon));
}(this, (function (exports, core, diagramLibrary, MCommon) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var DiagramView = /** @class */ (function () {
        function DiagramView() {
            this.inplaceEdit = false;
            this.enabled = true;
            this.roundedLinks = false;
            this.routeLinks = false;
            this.showGrid = false;
            this.autoResize = diagramLibrary.Diagramming.AutoResize.None;
            this.behavior = diagramLibrary.Diagramming.Behavior.LinkShapes;
            this.linkShape = diagramLibrary.Diagramming.LinkShape.Polyline;
            this.showAnchors = diagramLibrary.Diagramming.ShowAnchors.Auto;
            this.defaultShape = "Rectangle";
            this.linkHeadShapeSize = 5;
            this.nodeCreated = new core.EventEmitter();
            this.initializeLink = new core.EventEmitter();
            this.initializeNode = new core.EventEmitter();
            this.linkClicked = new core.EventEmitter();
            this.linkCreated = new core.EventEmitter();
            this.linkDeleted = new core.EventEmitter();
            this.linkDoubleClicked = new core.EventEmitter();
            this.linkModified = new core.EventEmitter();
            this.linkPointed = new core.EventEmitter();
            this.linkTextEdited = new core.EventEmitter();
            this.nodeClicked = new core.EventEmitter();
            this.nodeDeleted = new core.EventEmitter();
            this.nodeDoubleClicked = new core.EventEmitter();
            this.nodeModified = new core.EventEmitter();
            this.nodePointed = new core.EventEmitter();
            this.nodeTextEdited = new core.EventEmitter();
            this.linkCreating = new core.EventEmitter();
            this.linkDeleting = new core.EventEmitter();
            this.linkModifying = new core.EventEmitter();
            this.nodeCreating = new core.EventEmitter();
            this.nodeDeleting = new core.EventEmitter();
            this.nodeModifying = new core.EventEmitter();
            this.containerChildAdded = new core.EventEmitter();
            this.containerChildAdding = new core.EventEmitter();
            this.containerChildRemoving = new core.EventEmitter();
            this.containerChildRemoved = new core.EventEmitter();
            this.containerFolded = new core.EventEmitter();
            this.containerUnfolded = new core.EventEmitter();
            this.treeExpanded = new core.EventEmitter();
            this.treeCollapsed = new core.EventEmitter();
            this.selectionModifying = new core.EventEmitter();
            this.repaint = new core.EventEmitter();
            this.sizeChanged = new core.EventEmitter();
            this.nodeSelected = new core.EventEmitter();
            this.nodeDeselected = new core.EventEmitter();
            this.linkSelected = new core.EventEmitter();
            this.linkDeselected = new core.EventEmitter();
            this.controlLoaded = new core.EventEmitter();
            this.hitTestAdjustmentHandles = new core.EventEmitter();
            this.drawAdjustmentHandles = new core.EventEmitter();
            this.clicked = new core.EventEmitter();
            this.enterInplaceEditMode = new core.EventEmitter();
            this.leaveInplaceEditMode = new core.EventEmitter();
            this.createEditControl = new core.EventEmitter();
            this.cellTextEdited = new core.EventEmitter();
            this.laneGridCellTextEdited = new core.EventEmitter();
            this.serializeTag = new core.EventEmitter();
            this.deserializeTag = new core.EventEmitter();
            this.tableColumnResizing = new core.EventEmitter();
            this.tableColumnResized = new core.EventEmitter();
            this.tableRowResizing = new core.EventEmitter();
            this.tableRowResized = new core.EventEmitter();
            this.nodePasted = new core.EventEmitter();
            this.linkPasted = new core.EventEmitter();
            this.headerStartResizing = new core.EventEmitter();
            this.headerResized = new core.EventEmitter();
            this.itemAdded = new core.EventEmitter();
            this.itemRemoved = new core.EventEmitter();
            this.animatedLayoutCompleted = new core.EventEmitter();
            this.hyperlinkClicked = new core.EventEmitter();
            this.expandButtonClicked = new core.EventEmitter();
        }
        DiagramView.prototype.ngOnInit = function () {
            // bind properties
            if (this.passedID === undefined)
                this.passedID = "diagram";
            this.canvas.nativeElement.id = this.passedID;
            diagramLibrary.AbstractionLayer.attachControl(this.diagram, document.getElementById(this.passedID));
            this.diagram.setAllowInplaceEdit(this.inplaceEdit);
            this.diagram.setAutoResize(this.autoResize);
            this.diagram.setBackBrush(this.backBrush);
            this.diagram.setBehavior(this.behavior);
            this.diagram.setDefaultShape(diagramLibrary.Diagramming.Shape.fromId(this.defaultShape));
            this.diagram.setEnabled(this.enabled);
            this.diagram.setLinkHeadShapeSize(this.linkHeadShapeSize);
            this.diagram.setLinkShape(this.linkShape);
            this.diagram.setRoundedLinks(this.roundedLinks);
            this.diagram.setRouteLinks(this.routeLinks);
            this.diagram.setShowAnchors(this.showAnchors);
            this.diagram.setShowGrid(this.showGrid);
            // bind events
            var events = diagramLibrary.Diagramming.Events;
            for (var v in events) {
                function addAndDelegate(event, prop) {
                    prop.diagram.addEventListener(event, function (sender, args) {
                        var emitter = Reflect.get(prop, event);
                        emitter.emit({ sender: sender, args: args });
                    });
                }
                addAndDelegate(v, this);
            }
        };
        DiagramView.prototype.ngOnDestroy = function () {
            if (this.diagram) {
                this.diagram.dispose();
            }
        };
        __decorate([
            core.ViewChild('canvas', { static: true })
        ], DiagramView.prototype, "canvas", void 0);
        __decorate([
            core.Input('id')
        ], DiagramView.prototype, "passedID", void 0);
        __decorate([
            core.Input("diagram")
        ], DiagramView.prototype, "diagram", void 0);
        __decorate([
            core.Input("allowInplaceEdit")
        ], DiagramView.prototype, "inplaceEdit", void 0);
        __decorate([
            core.Input("enabled")
        ], DiagramView.prototype, "enabled", void 0);
        __decorate([
            core.Input("roundedLinks")
        ], DiagramView.prototype, "roundedLinks", void 0);
        __decorate([
            core.Input("routeLinks")
        ], DiagramView.prototype, "routeLinks", void 0);
        __decorate([
            core.Input("showGrid")
        ], DiagramView.prototype, "showGrid", void 0);
        __decorate([
            core.Input("autoResize")
        ], DiagramView.prototype, "autoResize", void 0);
        __decorate([
            core.Input("behavior")
        ], DiagramView.prototype, "behavior", void 0);
        __decorate([
            core.Input("linkShape")
        ], DiagramView.prototype, "linkShape", void 0);
        __decorate([
            core.Input("showAnchors")
        ], DiagramView.prototype, "showAnchors", void 0);
        __decorate([
            core.Input("backBrush")
        ], DiagramView.prototype, "backBrush", void 0);
        __decorate([
            core.Input("defaulShape")
        ], DiagramView.prototype, "defaultShape", void 0);
        __decorate([
            core.Input("linkHeadShapeSize")
        ], DiagramView.prototype, "linkHeadShapeSize", void 0);
        __decorate([
            core.Output("onNodeCreated")
        ], DiagramView.prototype, "nodeCreated", void 0);
        __decorate([
            core.Output("onInitializeLink")
        ], DiagramView.prototype, "initializeLink", void 0);
        __decorate([
            core.Output("onInitializeNode")
        ], DiagramView.prototype, "initializeNode", void 0);
        __decorate([
            core.Output("onLinkClicked")
        ], DiagramView.prototype, "linkClicked", void 0);
        __decorate([
            core.Output("onLinkCreated")
        ], DiagramView.prototype, "linkCreated", void 0);
        __decorate([
            core.Output("onLinkDeleted")
        ], DiagramView.prototype, "linkDeleted", void 0);
        __decorate([
            core.Output("onLinkDoubleClicked")
        ], DiagramView.prototype, "linkDoubleClicked", void 0);
        __decorate([
            core.Output("onLinkModified")
        ], DiagramView.prototype, "linkModified", void 0);
        __decorate([
            core.Output("onLinkPointed")
        ], DiagramView.prototype, "linkPointed", void 0);
        __decorate([
            core.Output("onLinkTextEdited")
        ], DiagramView.prototype, "linkTextEdited", void 0);
        __decorate([
            core.Output("onNodeClicked")
        ], DiagramView.prototype, "nodeClicked", void 0);
        __decorate([
            core.Output("onNodeDeleted")
        ], DiagramView.prototype, "nodeDeleted", void 0);
        __decorate([
            core.Output("onNodeDoubleClicked")
        ], DiagramView.prototype, "nodeDoubleClicked", void 0);
        __decorate([
            core.Output("onNodeModified")
        ], DiagramView.prototype, "nodeModified", void 0);
        __decorate([
            core.Output("onNodePointed")
        ], DiagramView.prototype, "nodePointed", void 0);
        __decorate([
            core.Output("onNodeTextEdited")
        ], DiagramView.prototype, "nodeTextEdited", void 0);
        __decorate([
            core.Output("onLinkCreating")
        ], DiagramView.prototype, "linkCreating", void 0);
        __decorate([
            core.Output("onLinkDeleting")
        ], DiagramView.prototype, "linkDeleting", void 0);
        __decorate([
            core.Output("onLinkModifying")
        ], DiagramView.prototype, "linkModifying", void 0);
        __decorate([
            core.Output("onNodeCreating")
        ], DiagramView.prototype, "nodeCreating", void 0);
        __decorate([
            core.Output("onNodeDeleting")
        ], DiagramView.prototype, "nodeDeleting", void 0);
        __decorate([
            core.Output("onNodeModifying")
        ], DiagramView.prototype, "nodeModifying", void 0);
        __decorate([
            core.Output("onContainerChildAdded")
        ], DiagramView.prototype, "containerChildAdded", void 0);
        __decorate([
            core.Output("onContainerChildAdding")
        ], DiagramView.prototype, "containerChildAdding", void 0);
        __decorate([
            core.Output("onContainerChildRemoving")
        ], DiagramView.prototype, "containerChildRemoving", void 0);
        __decorate([
            core.Output("onContainerChildRemoved")
        ], DiagramView.prototype, "containerChildRemoved", void 0);
        __decorate([
            core.Output("onContainerFolded")
        ], DiagramView.prototype, "containerFolded", void 0);
        __decorate([
            core.Output("onContainerUnfolded")
        ], DiagramView.prototype, "containerUnfolded", void 0);
        __decorate([
            core.Output("onTreeExpanded")
        ], DiagramView.prototype, "treeExpanded", void 0);
        __decorate([
            core.Output("onTreeCollapsed")
        ], DiagramView.prototype, "treeCollapsed", void 0);
        __decorate([
            core.Output("onSelectionModifying")
        ], DiagramView.prototype, "selectionModifying", void 0);
        __decorate([
            core.Output("onRepaint")
        ], DiagramView.prototype, "repaint", void 0);
        __decorate([
            core.Output("onSizeChanged")
        ], DiagramView.prototype, "sizeChanged", void 0);
        __decorate([
            core.Output("onNodeSelected")
        ], DiagramView.prototype, "nodeSelected", void 0);
        __decorate([
            core.Output("onNodeDeselected")
        ], DiagramView.prototype, "nodeDeselected", void 0);
        __decorate([
            core.Output("onLinkSelected")
        ], DiagramView.prototype, "linkSelected", void 0);
        __decorate([
            core.Output("onLinkDeselected")
        ], DiagramView.prototype, "linkDeselected", void 0);
        __decorate([
            core.Output("onControlLoaded")
        ], DiagramView.prototype, "controlLoaded", void 0);
        __decorate([
            core.Output("onHitTestAdjustmentHandles")
        ], DiagramView.prototype, "hitTestAdjustmentHandles", void 0);
        __decorate([
            core.Output("onDrawAdjustmentHandles")
        ], DiagramView.prototype, "drawAdjustmentHandles", void 0);
        __decorate([
            core.Output("onClicked")
        ], DiagramView.prototype, "clicked", void 0);
        __decorate([
            core.Output("onEnterInplaceEditMode")
        ], DiagramView.prototype, "enterInplaceEditMode", void 0);
        __decorate([
            core.Output("onLeaveInplaceEditMode")
        ], DiagramView.prototype, "leaveInplaceEditMode", void 0);
        __decorate([
            core.Output("onCreateEditControl")
        ], DiagramView.prototype, "createEditControl", void 0);
        __decorate([
            core.Output("onCellTextEdited")
        ], DiagramView.prototype, "cellTextEdited", void 0);
        __decorate([
            core.Output("onLaneGridCellTextEdited")
        ], DiagramView.prototype, "laneGridCellTextEdited", void 0);
        __decorate([
            core.Output("onSerializeTag")
        ], DiagramView.prototype, "serializeTag", void 0);
        __decorate([
            core.Output("onDeserializeTag")
        ], DiagramView.prototype, "deserializeTag", void 0);
        __decorate([
            core.Output("onTableColumnResizing")
        ], DiagramView.prototype, "tableColumnResizing", void 0);
        __decorate([
            core.Output("onTableColumnResized")
        ], DiagramView.prototype, "tableColumnResized", void 0);
        __decorate([
            core.Output("onTableRowResizing")
        ], DiagramView.prototype, "tableRowResizing", void 0);
        __decorate([
            core.Output("onTableRowResized")
        ], DiagramView.prototype, "tableRowResized", void 0);
        __decorate([
            core.Output("onNodePasted")
        ], DiagramView.prototype, "nodePasted", void 0);
        __decorate([
            core.Output("onLinkPasted")
        ], DiagramView.prototype, "linkPasted", void 0);
        __decorate([
            core.Output("onHeaderStartResizing")
        ], DiagramView.prototype, "headerStartResizing", void 0);
        __decorate([
            core.Output("onHeaderResized")
        ], DiagramView.prototype, "headerResized", void 0);
        __decorate([
            core.Output("onItemAdded")
        ], DiagramView.prototype, "itemAdded", void 0);
        __decorate([
            core.Output("onItemRemoved")
        ], DiagramView.prototype, "itemRemoved", void 0);
        __decorate([
            core.Output("onAnimatedLayoutCompleted")
        ], DiagramView.prototype, "animatedLayoutCompleted", void 0);
        __decorate([
            core.Output("onHyperlinkClicked")
        ], DiagramView.prototype, "hyperlinkClicked", void 0);
        __decorate([
            core.Output("onExpandButtonClicked")
        ], DiagramView.prototype, "expandButtonClicked", void 0);
        DiagramView = __decorate([
            core.Component({
                selector: 'diagram-view',
                template: "\n    <div style=\"position: absolute; overflow: auto; width: auto; height: auto; top: 0px; bottom: 0px; left: 0px; right: 0px; text-align: left;\">\n       <canvas #canvas></canvas>\n    </div>"
            })
        ], DiagramView);
        return DiagramView;
    }());

    var NodeListView = /** @class */ (function () {
        function NodeListView() {
            this.enabled = true;
            this.icon_size = new diagramLibrary.Drawing.Size(24, 24);
            this.node_size = new diagramLibrary.Drawing.Size(24, 24);
            this.padding = 5;
            this.orientation = diagramLibrary.Diagramming.Orientation.Vertical;
            this.tooltipDelay = 1000;
            this.shapeLibraryLocation = "";
        }
        NodeListView.prototype.ngAfterViewInit = function () {
            if (this.node_id === undefined)
                this.node_id = "nodeList";
            this.canvas.nativeElement.id = this.node_id;
            this.nodeList = diagramLibrary.Diagramming.NodeListView.create(document.getElementById(this.node_id));
            this.nodeList.setEnabled(this.enabled);
            this.nodeList.setIconSize(this.icon_size);
            this.nodeList.setDefaultNodeSize(this.node_size);
            this.nodeList.setPadding(this.padding);
            this.nodeList.setOrientation(this.orientation);
            this.nodeList.setShapeLibraryLocation(this.shapeLibraryLocation);
            this.nodeList.setTooltipDelay(this.tooltipDelay);
            this.addNode(this.nodes, this.caption);
        };
        NodeListView.prototype.addNode = function (nodes, caption) {
            for (var i = 0; i < nodes.length; ++i) {
                this.nodeList.addNode(nodes[i], caption[i]);
            }
        };
        __decorate([
            core.ViewChild('nodeList', { static: true })
        ], NodeListView.prototype, "canvas", void 0);
        __decorate([
            core.Input('id')
        ], NodeListView.prototype, "node_id", void 0);
        __decorate([
            core.Input('enabled')
        ], NodeListView.prototype, "enabled", void 0);
        __decorate([
            core.Input('iconSize')
        ], NodeListView.prototype, "icon_size", void 0);
        __decorate([
            core.Input('defaultNodeSize')
        ], NodeListView.prototype, "node_size", void 0);
        __decorate([
            core.Input('padding')
        ], NodeListView.prototype, "padding", void 0);
        __decorate([
            core.Input('orientation')
        ], NodeListView.prototype, "orientation", void 0);
        __decorate([
            core.Input('tooltipDelay')
        ], NodeListView.prototype, "tooltipDelay", void 0);
        __decorate([
            core.Input('shapeLibraryLocation')
        ], NodeListView.prototype, "shapeLibraryLocation", void 0);
        __decorate([
            core.Input('captions')
        ], NodeListView.prototype, "caption", void 0);
        __decorate([
            core.Input('nodes')
        ], NodeListView.prototype, "nodes", void 0);
        NodeListView = __decorate([
            core.Component({
                selector: 'node-list-view',
                template: "<div style=\"overflow-y: auto; overflow-x: hidden; width: 230px; height: 200px;\">\n                 <canvas #nodeList width=\"230\" height=\"200\" ></canvas>\n               </div>"
            })
        ], NodeListView);
        return NodeListView;
    }());

    var Overview = /** @class */ (function () {
        function Overview() {
            this.enabled = true;
            this.allow_zoom = false;
            this.back_color = "#FFFFFF";
            this.scale_factor = 17.825311942959;
            this.auto_s_amount = 0;
            this.scale_mode = diagramLibrary.Diagramming.ScaleMode.FitAll;
        }
        Overview.prototype.ngAfterViewInit = function () {
            if (this.view_id === undefined)
                this.view_id = "overview";
            this.canvas.nativeElement.id = this.view_id;
            var overview = diagramLibrary.Diagramming.Overview.create(document.getElementById(this.view_id));
            overview.setDiagram(this.diagram);
            overview.setEnabled(this.enabled);
            overview.setAllowZoom(this.allow_zoom);
            overview.setScaleFactor(this.scale_factor);
            overview.setAutoScrollAmount(this.auto_s_amount);
            overview.setScaleMode(this.scale_mode);
            overview.setBackColor(this.back_color);
        };
        __decorate([
            core.ViewChild('overview', { static: true })
        ], Overview.prototype, "canvas", void 0);
        __decorate([
            core.Input('id')
        ], Overview.prototype, "view_id", void 0);
        __decorate([
            core.Input('diagram')
        ], Overview.prototype, "diagram", void 0);
        __decorate([
            core.Input('enabled')
        ], Overview.prototype, "enabled", void 0);
        __decorate([
            core.Input('allowZoom')
        ], Overview.prototype, "allow_zoom", void 0);
        __decorate([
            core.Input('backColor')
        ], Overview.prototype, "back_color", void 0);
        __decorate([
            core.Input('scaleFactor')
        ], Overview.prototype, "scale_factor", void 0);
        __decorate([
            core.Input('autoScrollAmount')
        ], Overview.prototype, "auto_s_amount", void 0);
        __decorate([
            core.Input('scaleMode')
        ], Overview.prototype, "scale_mode", void 0);
        Overview = __decorate([
            core.Component({
                selector: 'overview',
                template: "<div style=\" width: 200px; height: 200px; \">\n                 <canvas #overview width=\"200\" height=\"200\"></canvas>\n               </div>"
            })
        ], Overview);
        return Overview;
    }());

    var Ruler = /** @class */ (function () {
        function Ruler() {
            this.gr_unit = diagramLibrary.Drawing.GraphicsUnit.Millimeter;
            this.en_guides = true;
            this.vert_visible = true;
            this.hor_visible = true;
            this.pointer_color = "red";
            this.text_color = "#000000";
            this.guide_color = "#000000";
            this.projection_color = "lightSteelBlue";
            this.back_color = "#dddddd";
            this.fore_Color = "#000000";
        }
        Ruler.prototype.ngAfterContentInit = function () {
            if (this.ruler_id === undefined)
                this.ruler_id = "ruler";
            this.div_id.nativeElement.id = this.ruler_id;
            var ruler = new diagramLibrary.Diagramming.Ruler(document.getElementById(this.ruler_id));
            if (this.input && (this.input instanceof DiagramView)) {
                ruler.setDiagram(this.input.diagram);
            }
            else {
                console.error('ruler requirs diagram-view');
            }
            ruler.setUnit(this.gr_unit);
            ruler.setEnableGuides(this.en_guides);
            ruler.setProjectRotatedBounds(this.pr_bounds);
            ruler.setNegatedX(this.neg_x);
            ruler.setNegatedY(this.neg_y);
            ruler.setVerticalScaleVisible(this.vert_visible);
            ruler.setHorizontalScaleVisible(this.hor_visible);
            ruler.setPointerColor(this.pointer_color);
            ruler.setTextColor(this.text_color);
            ruler.setGuideColor(this.guide_color);
            ruler.setProjectionColor(this.projection_color);
            ruler.setBackColor(this.back_color);
            ruler.setForeColor(this.fore_Color);
        };
        __decorate([
            core.ContentChild(DiagramView)
        ], Ruler.prototype, "input", void 0);
        __decorate([
            core.ViewChild('id', { static: true })
        ], Ruler.prototype, "div_id", void 0);
        __decorate([
            core.Input('unit')
        ], Ruler.prototype, "gr_unit", void 0);
        __decorate([
            core.Input('enableGuides')
        ], Ruler.prototype, "en_guides", void 0);
        __decorate([
            core.Input('projectRotatedBounds')
        ], Ruler.prototype, "pr_bounds", void 0);
        __decorate([
            core.Input('negatedY')
        ], Ruler.prototype, "neg_y", void 0);
        __decorate([
            core.Input('negatedX')
        ], Ruler.prototype, "neg_x", void 0);
        __decorate([
            core.Input('verticalScaleVisible')
        ], Ruler.prototype, "vert_visible", void 0);
        __decorate([
            core.Input('horizontalScaleVisible')
        ], Ruler.prototype, "hor_visible", void 0);
        __decorate([
            core.Input('id')
        ], Ruler.prototype, "ruler_id", void 0);
        __decorate([
            core.Input('pointerColor')
        ], Ruler.prototype, "pointer_color", void 0);
        __decorate([
            core.Input('textColor')
        ], Ruler.prototype, "text_color", void 0);
        __decorate([
            core.Input('guideColor')
        ], Ruler.prototype, "guide_color", void 0);
        __decorate([
            core.Input('projectionColor')
        ], Ruler.prototype, "projection_color", void 0);
        __decorate([
            core.Input('backColor')
        ], Ruler.prototype, "back_color", void 0);
        __decorate([
            core.Input('foreColor')
        ], Ruler.prototype, "fore_Color", void 0);
        Ruler = __decorate([
            core.Component({
                selector: 'ruler',
                template: "<div #id>\n                   <ng-content></ng-content>\n               </div>"
            })
        ], Ruler);
        return Ruler;
    }());

    var ZoomControl = /** @class */ (function () {
        function ZoomControl() {
            this.enabled = true;
            this.cornerRadius = 2;
            this.padding = 2;
            this.snapToZoomStep = true;
            this.tick_Position = diagramLibrary.Controls.TickPosition.Left;
            this.show_label = true;
            this.txt_color = "rgba(77,83,94,1)";
            this.sh_color = "gray";
            this.inn_color = "rgba(91,91,91,1)";
            this.br_color = "rgba(77,83,94,1)";
            this.act_Color = "skyBlue";
            this.fl = "#FFFFFF";
            this.back_color = "#FFFFFF";
            this.scr_step = 10;
            this.z_step = 10;
            this.mx_Z_fac = 200;
            this.mn_Z_fac = 0;
            this.z_fac = 100;
        }
        ZoomControl.prototype.ngAfterViewInit = function () {
            if (this.zoom_id === undefined)
                this.zoom_id = "zoomer";
            this.canvas.nativeElement.id = this.zoom_id;
            var zoomer = diagramLibrary.Controls.ZoomControl.create(document.getElementById(this.zoom_id));
            zoomer.setCornerRadius(this.cornerRadius);
            zoomer.setPadding(this.padding);
            zoomer.setSnapToZoomStep(this.snapToZoomStep);
            zoomer.setTickPosition(this.tick_Position);
            zoomer.setShowLabel(this.show_label);
            zoomer.setTextColor(this.txt_color);
            zoomer.setShadowColor(this.sh_color);
            zoomer.setInnerColor(this.inn_color);
            zoomer.setBorderColor(this.br_color);
            zoomer.setActiveColor(this.act_Color);
            zoomer.setFill(this.fl);
            zoomer.setBackColor(this.back_color);
            zoomer.setScrollStep(this.scr_step);
            zoomer.setZoomStep(this.z_step);
            zoomer.setMaxZoomFactor(this.mx_Z_fac);
            zoomer.setMinZoomFactor(this.mn_Z_fac);
            zoomer.setZoomFactor(this.z_fac);
            zoomer.setEnabled(true);
            zoomer.setTarget(this.diagram);
        };
        __decorate([
            core.ViewChild('zoomer', { static: true })
        ], ZoomControl.prototype, "canvas", void 0);
        __decorate([
            core.Input('id')
        ], ZoomControl.prototype, "zoom_id", void 0);
        __decorate([
            core.Input('diagram')
        ], ZoomControl.prototype, "diagram", void 0);
        __decorate([
            core.Input('enabled')
        ], ZoomControl.prototype, "enabled", void 0);
        __decorate([
            core.Input('cornerRadius')
        ], ZoomControl.prototype, "cornerRadius", void 0);
        __decorate([
            core.Input('padding')
        ], ZoomControl.prototype, "padding", void 0);
        __decorate([
            core.Input('snapToZoomStep')
        ], ZoomControl.prototype, "snapToZoomStep", void 0);
        __decorate([
            core.Input('tickPosition')
        ], ZoomControl.prototype, "tick_Position", void 0);
        __decorate([
            core.Input('showLabel')
        ], ZoomControl.prototype, "show_label", void 0);
        __decorate([
            core.Input('textColor')
        ], ZoomControl.prototype, "txt_color", void 0);
        __decorate([
            core.Input('shadowColor')
        ], ZoomControl.prototype, "sh_color", void 0);
        __decorate([
            core.Input('innerColor')
        ], ZoomControl.prototype, "inn_color", void 0);
        __decorate([
            core.Input('borderColor')
        ], ZoomControl.prototype, "br_color", void 0);
        __decorate([
            core.Input('activeColor')
        ], ZoomControl.prototype, "act_Color", void 0);
        __decorate([
            core.Input("fill")
        ], ZoomControl.prototype, "fl", void 0);
        __decorate([
            core.Input('backColor')
        ], ZoomControl.prototype, "back_color", void 0);
        __decorate([
            core.Input('scrollStep')
        ], ZoomControl.prototype, "scr_step", void 0);
        __decorate([
            core.Input('zoomStep')
        ], ZoomControl.prototype, "z_step", void 0);
        __decorate([
            core.Input('maxZoomFactor')
        ], ZoomControl.prototype, "mx_Z_fac", void 0);
        __decorate([
            core.Input('minZoomFactor')
        ], ZoomControl.prototype, "mn_Z_fac", void 0);
        __decorate([
            core.Input('zoomFactor')
        ], ZoomControl.prototype, "z_fac", void 0);
        ZoomControl = __decorate([
            core.Component({
                selector: 'zoom-control',
                template: "<div style=\"width: 50px; height: 300px;\">\n                  <canvas #zoomer width=\"50px\" height=\"300px\"></canvas>\n               </div>"
            })
        ], ZoomControl);
        return ZoomControl;
    }());

    var AngularDiagram = /** @class */ (function () {
        function AngularDiagram() {
        }
        AngularDiagram = __decorate([
            core.NgModule({
                declarations: [DiagramView, NodeListView, Overview, Ruler, ZoomControl],
                imports: [],
                exports: [DiagramView, NodeListView, Ruler, Overview, ZoomControl]
            })
        ], AngularDiagram);
        return AngularDiagram;
    }());

    var Common = MCommon;

    exports.AngularDiagram = AngularDiagram;
    exports.Common = Common;
    exports.DiagramView = DiagramView;
    exports.NodeListView = NodeListView;
    exports.Overview = Overview;
    exports.Ruler = Ruler;
    exports.ZoomControl = ZoomControl;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=diagram-library-angular.umd.js.map
