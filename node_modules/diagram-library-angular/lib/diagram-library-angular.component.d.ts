import { OnInit, OnDestroy, EventEmitter, ElementRef } from '@angular/core';
import * as MindFusion from 'diagram-library';
import Diagram = MindFusion.Diagramming.Diagram;
export declare class DiagramView implements OnInit, OnDestroy {
    canvas: ElementRef<HTMLCanvasElement>;
    passedID: string;
    diagram: Diagram;
    inplaceEdit: boolean;
    enabled: boolean;
    roundedLinks: boolean;
    routeLinks: boolean;
    showGrid: boolean;
    autoResize: MindFusion.Diagramming.AutoResize;
    behavior: MindFusion.Diagramming.Behavior;
    linkShape: MindFusion.Diagramming.LinkShape;
    showAnchors: MindFusion.Diagramming.ShowAnchors;
    backBrush: string;
    defaultShape: string;
    linkHeadShapeSize: number;
    nodeCreated: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    initializeLink: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    initializeNode: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkClicked: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkCreated: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkDeleted: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkDoubleClicked: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkModified: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkPointed: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkTextEdited: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodeClicked: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodeDeleted: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodeDoubleClicked: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodeModified: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodePointed: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodeTextEdited: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkCreating: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkDeleting: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkModifying: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodeCreating: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodeDeleting: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodeModifying: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    containerChildAdded: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    containerChildAdding: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    containerChildRemoving: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    containerChildRemoved: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    containerFolded: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    containerUnfolded: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    treeExpanded: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    treeCollapsed: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    selectionModifying: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    repaint: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    sizeChanged: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodeSelected: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodeDeselected: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkSelected: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkDeselected: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    controlLoaded: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    hitTestAdjustmentHandles: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    drawAdjustmentHandles: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    clicked: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    enterInplaceEditMode: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    leaveInplaceEditMode: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    createEditControl: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    cellTextEdited: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    laneGridCellTextEdited: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    serializeTag: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    deserializeTag: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    tableColumnResizing: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    tableColumnResized: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    tableRowResizing: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    tableRowResized: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    nodePasted: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    linkPasted: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    headerStartResizing: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    headerResized: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    itemAdded: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    itemRemoved: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    animatedLayoutCompleted: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    hyperlinkClicked: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    expandButtonClicked: EventEmitter<{
        sender: DiagramView;
        args: any;
    }>;
    constructor();
    ngOnInit(): void;
    ngOnDestroy(): void;
}
