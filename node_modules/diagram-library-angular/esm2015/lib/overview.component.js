import { __decorate } from "tslib";
import { Component, ViewChild, Input } from '@angular/core';
import * as MindFusion from 'diagram-library';
let Overview = class Overview {
    constructor() {
        this.enabled = true;
        this.allow_zoom = false;
        this.back_color = "#FFFFFF";
        this.scale_factor = 17.825311942959;
        this.auto_s_amount = 0;
        this.scale_mode = MindFusion.Diagramming.ScaleMode.FitAll;
    }
    ngAfterViewInit() {
        if (this.view_id === undefined)
            this.view_id = "overview";
        this.canvas.nativeElement.id = this.view_id;
        var overview = MindFusion.Diagramming.Overview.create(document.getElementById(this.view_id));
        overview.setDiagram(this.diagram);
        overview.setEnabled(this.enabled);
        overview.setAllowZoom(this.allow_zoom);
        overview.setScaleFactor(this.scale_factor);
        overview.setAutoScrollAmount(this.auto_s_amount);
        overview.setScaleMode(this.scale_mode);
        overview.setBackColor(this.back_color);
    }
};
__decorate([
    ViewChild('overview', { static: true })
], Overview.prototype, "canvas", void 0);
__decorate([
    Input('id')
], Overview.prototype, "view_id", void 0);
__decorate([
    Input('diagram')
], Overview.prototype, "diagram", void 0);
__decorate([
    Input('enabled')
], Overview.prototype, "enabled", void 0);
__decorate([
    Input('allowZoom')
], Overview.prototype, "allow_zoom", void 0);
__decorate([
    Input('backColor')
], Overview.prototype, "back_color", void 0);
__decorate([
    Input('scaleFactor')
], Overview.prototype, "scale_factor", void 0);
__decorate([
    Input('autoScrollAmount')
], Overview.prototype, "auto_s_amount", void 0);
__decorate([
    Input('scaleMode')
], Overview.prototype, "scale_mode", void 0);
Overview = __decorate([
    Component({
        selector: 'overview',
        template: `<div style=" width: 200px; height: 200px; ">
                 <canvas #overview width="200" height="200"></canvas>
               </div>`
    })
], Overview);
export { Overview };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcnZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vZGlhZ3JhbS1saWJyYXJ5LWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvb3ZlcnZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFpQixTQUFTLEVBQWMsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQ3RGLE9BQU8sS0FBSyxVQUFVLE1BQU0saUJBQWlCLENBQUM7QUFXOUMsSUFBYSxRQUFRLEdBQXJCLE1BQWEsUUFBUTtJQUFyQjtRQU1zQixZQUFPLEdBQVksSUFBSSxDQUFDO1FBQ3RCLGVBQVUsR0FBWSxLQUFLLENBQUM7UUFDNUIsZUFBVSxHQUFXLFNBQVMsQ0FBQztRQUM3QixpQkFBWSxHQUFXLGVBQWUsQ0FBQztRQUNsQyxrQkFBYSxHQUFXLENBQUMsQ0FBQztRQUNqQyxlQUFVLEdBQXFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQWtCL0csQ0FBQztJQWhCRyxlQUFlO1FBRVgsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVM7WUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUM7UUFFOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDNUMsSUFBSSxRQUFRLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDN0YsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDM0MsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNqRCxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2QyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUUzQyxDQUFDO0NBQ0osQ0FBQTtBQTFCNEM7SUFBeEMsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzt3Q0FBdUM7QUFDbEU7SUFBWixLQUFLLENBQUMsSUFBSSxDQUFDO3lDQUFpQjtBQUNYO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7eUNBQWtCO0FBQ2pCO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7eUNBQXlCO0FBQ3RCO0lBQW5CLEtBQUssQ0FBQyxXQUFXLENBQUM7NENBQTZCO0FBQzVCO0lBQW5CLEtBQUssQ0FBQyxXQUFXLENBQUM7NENBQWdDO0FBQzdCO0lBQXJCLEtBQUssQ0FBQyxhQUFhLENBQUM7OENBQXdDO0FBQ2xDO0lBQTFCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQzsrQ0FBMkI7QUFDakM7SUFBbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQzs0Q0FBd0Y7QUFYbEcsUUFBUTtJQVBwQixTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsVUFBVTtRQUNwQixRQUFRLEVBQUU7O3NCQUVRO0tBRXJCLENBQUM7R0FDVyxRQUFRLENBNkJwQjtTQTdCWSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBBZnRlclZpZXdJbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0ICogYXMgTWluZEZ1c2lvbiBmcm9tICdkaWFncmFtLWxpYnJhcnknO1xyXG5pbXBvcnQgRGlhZ3JhbSA9IE1pbmRGdXNpb24uRGlhZ3JhbW1pbmcuRGlhZ3JhbTtcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnb3ZlcnZpZXcnLFxyXG4gICAgdGVtcGxhdGU6IGA8ZGl2IHN0eWxlPVwiIHdpZHRoOiAyMDBweDsgaGVpZ2h0OiAyMDBweDsgXCI+XHJcbiAgICAgICAgICAgICAgICAgPGNhbnZhcyAjb3ZlcnZpZXcgd2lkdGg9XCIyMDBcIiBoZWlnaHQ9XCIyMDBcIj48L2NhbnZhcz5cclxuICAgICAgICAgICAgICAgPC9kaXY+YFxyXG5cclxufSlcclxuZXhwb3J0IGNsYXNzIE92ZXJ2aWV3IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ292ZXJ2aWV3JywgeyBzdGF0aWM6IHRydWUgfSkgY2FudmFzOiBFbGVtZW50UmVmPEhUTUxDYW52YXNFbGVtZW50PjtcclxuICAgIEBJbnB1dCgnaWQnKSB2aWV3X2lkOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ2RpYWdyYW0nKSBkaWFncmFtOiBEaWFncmFtO1xyXG4gICAgQElucHV0KCdlbmFibGVkJykgZW5hYmxlZDogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBASW5wdXQoJ2FsbG93Wm9vbScpIGFsbG93X3pvb206IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIEBJbnB1dCgnYmFja0NvbG9yJykgYmFja19jb2xvcjogc3RyaW5nID0gXCIjRkZGRkZGXCI7XHJcbiAgICBASW5wdXQoJ3NjYWxlRmFjdG9yJykgc2NhbGVfZmFjdG9yOiBudW1iZXIgPSAxNy44MjUzMTE5NDI5NTk7XHJcbiAgICBASW5wdXQoJ2F1dG9TY3JvbGxBbW91bnQnKSBhdXRvX3NfYW1vdW50OiBudW1iZXIgPSAwO1xyXG4gICAgQElucHV0KCdzY2FsZU1vZGUnKSBzY2FsZV9tb2RlOiBNaW5kRnVzaW9uLkRpYWdyYW1taW5nLlNjYWxlTW9kZSA9IE1pbmRGdXNpb24uRGlhZ3JhbW1pbmcuU2NhbGVNb2RlLkZpdEFsbDtcclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnZpZXdfaWQgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy52aWV3X2lkID0gXCJvdmVydmlld1wiO1xyXG5cclxuICAgICAgICB0aGlzLmNhbnZhcy5uYXRpdmVFbGVtZW50LmlkID0gdGhpcy52aWV3X2lkO1xyXG4gICAgICAgIHZhciBvdmVydmlldyA9IE1pbmRGdXNpb24uRGlhZ3JhbW1pbmcuT3ZlcnZpZXcuY3JlYXRlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMudmlld19pZCkpO1xyXG4gICAgICAgIG92ZXJ2aWV3LnNldERpYWdyYW0odGhpcy5kaWFncmFtKTtcclxuICAgICAgICBvdmVydmlldy5zZXRFbmFibGVkKHRoaXMuZW5hYmxlZCk7XHJcbiAgICAgICAgb3ZlcnZpZXcuc2V0QWxsb3dab29tKHRoaXMuYWxsb3dfem9vbSk7XHJcbiAgICAgICAgb3ZlcnZpZXcuc2V0U2NhbGVGYWN0b3IodGhpcy5zY2FsZV9mYWN0b3IpO1xyXG4gICAgICAgIG92ZXJ2aWV3LnNldEF1dG9TY3JvbGxBbW91bnQodGhpcy5hdXRvX3NfYW1vdW50KTtcclxuICAgICAgICBvdmVydmlldy5zZXRTY2FsZU1vZGUodGhpcy5zY2FsZV9tb2RlKTtcclxuICAgICAgICBvdmVydmlldy5zZXRCYWNrQ29sb3IodGhpcy5iYWNrX2NvbG9yKTtcclxuXHJcbiAgICB9XHJcbn1cclxuIl19