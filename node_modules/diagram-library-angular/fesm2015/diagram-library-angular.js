import { __decorate } from 'tslib';
import { EventEmitter, ViewChild, Input, Output, Component, ContentChild, NgModule } from '@angular/core';
import { Diagramming, AbstractionLayer, Drawing, Controls } from 'diagram-library';
import * as MCommon from 'mindfusion-common';

let DiagramView = class DiagramView {
    constructor() {
        this.inplaceEdit = false;
        this.enabled = true;
        this.roundedLinks = false;
        this.routeLinks = false;
        this.showGrid = false;
        this.autoResize = Diagramming.AutoResize.None;
        this.behavior = Diagramming.Behavior.LinkShapes;
        this.linkShape = Diagramming.LinkShape.Polyline;
        this.showAnchors = Diagramming.ShowAnchors.Auto;
        this.defaultShape = "Rectangle";
        this.linkHeadShapeSize = 5;
        this.nodeCreated = new EventEmitter();
        this.initializeLink = new EventEmitter();
        this.initializeNode = new EventEmitter();
        this.linkClicked = new EventEmitter();
        this.linkCreated = new EventEmitter();
        this.linkDeleted = new EventEmitter();
        this.linkDoubleClicked = new EventEmitter();
        this.linkModified = new EventEmitter();
        this.linkPointed = new EventEmitter();
        this.linkTextEdited = new EventEmitter();
        this.nodeClicked = new EventEmitter();
        this.nodeDeleted = new EventEmitter();
        this.nodeDoubleClicked = new EventEmitter();
        this.nodeModified = new EventEmitter();
        this.nodePointed = new EventEmitter();
        this.nodeTextEdited = new EventEmitter();
        this.linkCreating = new EventEmitter();
        this.linkDeleting = new EventEmitter();
        this.linkModifying = new EventEmitter();
        this.nodeCreating = new EventEmitter();
        this.nodeDeleting = new EventEmitter();
        this.nodeModifying = new EventEmitter();
        this.containerChildAdded = new EventEmitter();
        this.containerChildAdding = new EventEmitter();
        this.containerChildRemoving = new EventEmitter();
        this.containerChildRemoved = new EventEmitter();
        this.containerFolded = new EventEmitter();
        this.containerUnfolded = new EventEmitter();
        this.treeExpanded = new EventEmitter();
        this.treeCollapsed = new EventEmitter();
        this.selectionModifying = new EventEmitter();
        this.repaint = new EventEmitter();
        this.sizeChanged = new EventEmitter();
        this.nodeSelected = new EventEmitter();
        this.nodeDeselected = new EventEmitter();
        this.linkSelected = new EventEmitter();
        this.linkDeselected = new EventEmitter();
        this.controlLoaded = new EventEmitter();
        this.hitTestAdjustmentHandles = new EventEmitter();
        this.drawAdjustmentHandles = new EventEmitter();
        this.clicked = new EventEmitter();
        this.enterInplaceEditMode = new EventEmitter();
        this.leaveInplaceEditMode = new EventEmitter();
        this.createEditControl = new EventEmitter();
        this.cellTextEdited = new EventEmitter();
        this.laneGridCellTextEdited = new EventEmitter();
        this.serializeTag = new EventEmitter();
        this.deserializeTag = new EventEmitter();
        this.tableColumnResizing = new EventEmitter();
        this.tableColumnResized = new EventEmitter();
        this.tableRowResizing = new EventEmitter();
        this.tableRowResized = new EventEmitter();
        this.nodePasted = new EventEmitter();
        this.linkPasted = new EventEmitter();
        this.headerStartResizing = new EventEmitter();
        this.headerResized = new EventEmitter();
        this.itemAdded = new EventEmitter();
        this.itemRemoved = new EventEmitter();
        this.animatedLayoutCompleted = new EventEmitter();
        this.hyperlinkClicked = new EventEmitter();
        this.expandButtonClicked = new EventEmitter();
    }
    ngOnInit() {
        // bind properties
        if (this.passedID === undefined)
            this.passedID = "diagram";
        this.canvas.nativeElement.id = this.passedID;
        AbstractionLayer.attachControl(this.diagram, document.getElementById(this.passedID));
        this.diagram.setAllowInplaceEdit(this.inplaceEdit);
        this.diagram.setAutoResize(this.autoResize);
        this.diagram.setBackBrush(this.backBrush);
        this.diagram.setBehavior(this.behavior);
        this.diagram.setDefaultShape(Diagramming.Shape.fromId(this.defaultShape));
        this.diagram.setEnabled(this.enabled);
        this.diagram.setLinkHeadShapeSize(this.linkHeadShapeSize);
        this.diagram.setLinkShape(this.linkShape);
        this.diagram.setRoundedLinks(this.roundedLinks);
        this.diagram.setRouteLinks(this.routeLinks);
        this.diagram.setShowAnchors(this.showAnchors);
        this.diagram.setShowGrid(this.showGrid);
        // bind events
        var events = Diagramming.Events;
        for (var v in events) {
            function addAndDelegate(event, prop) {
                prop.diagram.addEventListener(event, (sender, args) => {
                    let emitter = Reflect.get(prop, event);
                    emitter.emit({ sender, args });
                });
            }
            addAndDelegate(v, this);
        }
    }
    ngOnDestroy() {
        if (this.diagram) {
            this.diagram.dispose();
        }
    }
};
__decorate([
    ViewChild('canvas', { static: true })
], DiagramView.prototype, "canvas", void 0);
__decorate([
    Input('id')
], DiagramView.prototype, "passedID", void 0);
__decorate([
    Input("diagram")
], DiagramView.prototype, "diagram", void 0);
__decorate([
    Input("allowInplaceEdit")
], DiagramView.prototype, "inplaceEdit", void 0);
__decorate([
    Input("enabled")
], DiagramView.prototype, "enabled", void 0);
__decorate([
    Input("roundedLinks")
], DiagramView.prototype, "roundedLinks", void 0);
__decorate([
    Input("routeLinks")
], DiagramView.prototype, "routeLinks", void 0);
__decorate([
    Input("showGrid")
], DiagramView.prototype, "showGrid", void 0);
__decorate([
    Input("autoResize")
], DiagramView.prototype, "autoResize", void 0);
__decorate([
    Input("behavior")
], DiagramView.prototype, "behavior", void 0);
__decorate([
    Input("linkShape")
], DiagramView.prototype, "linkShape", void 0);
__decorate([
    Input("showAnchors")
], DiagramView.prototype, "showAnchors", void 0);
__decorate([
    Input("backBrush")
], DiagramView.prototype, "backBrush", void 0);
__decorate([
    Input("defaulShape")
], DiagramView.prototype, "defaultShape", void 0);
__decorate([
    Input("linkHeadShapeSize")
], DiagramView.prototype, "linkHeadShapeSize", void 0);
__decorate([
    Output("onNodeCreated")
], DiagramView.prototype, "nodeCreated", void 0);
__decorate([
    Output("onInitializeLink")
], DiagramView.prototype, "initializeLink", void 0);
__decorate([
    Output("onInitializeNode")
], DiagramView.prototype, "initializeNode", void 0);
__decorate([
    Output("onLinkClicked")
], DiagramView.prototype, "linkClicked", void 0);
__decorate([
    Output("onLinkCreated")
], DiagramView.prototype, "linkCreated", void 0);
__decorate([
    Output("onLinkDeleted")
], DiagramView.prototype, "linkDeleted", void 0);
__decorate([
    Output("onLinkDoubleClicked")
], DiagramView.prototype, "linkDoubleClicked", void 0);
__decorate([
    Output("onLinkModified")
], DiagramView.prototype, "linkModified", void 0);
__decorate([
    Output("onLinkPointed")
], DiagramView.prototype, "linkPointed", void 0);
__decorate([
    Output("onLinkTextEdited")
], DiagramView.prototype, "linkTextEdited", void 0);
__decorate([
    Output("onNodeClicked")
], DiagramView.prototype, "nodeClicked", void 0);
__decorate([
    Output("onNodeDeleted")
], DiagramView.prototype, "nodeDeleted", void 0);
__decorate([
    Output("onNodeDoubleClicked")
], DiagramView.prototype, "nodeDoubleClicked", void 0);
__decorate([
    Output("onNodeModified")
], DiagramView.prototype, "nodeModified", void 0);
__decorate([
    Output("onNodePointed")
], DiagramView.prototype, "nodePointed", void 0);
__decorate([
    Output("onNodeTextEdited")
], DiagramView.prototype, "nodeTextEdited", void 0);
__decorate([
    Output("onLinkCreating")
], DiagramView.prototype, "linkCreating", void 0);
__decorate([
    Output("onLinkDeleting")
], DiagramView.prototype, "linkDeleting", void 0);
__decorate([
    Output("onLinkModifying")
], DiagramView.prototype, "linkModifying", void 0);
__decorate([
    Output("onNodeCreating")
], DiagramView.prototype, "nodeCreating", void 0);
__decorate([
    Output("onNodeDeleting")
], DiagramView.prototype, "nodeDeleting", void 0);
__decorate([
    Output("onNodeModifying")
], DiagramView.prototype, "nodeModifying", void 0);
__decorate([
    Output("onContainerChildAdded")
], DiagramView.prototype, "containerChildAdded", void 0);
__decorate([
    Output("onContainerChildAdding")
], DiagramView.prototype, "containerChildAdding", void 0);
__decorate([
    Output("onContainerChildRemoving")
], DiagramView.prototype, "containerChildRemoving", void 0);
__decorate([
    Output("onContainerChildRemoved")
], DiagramView.prototype, "containerChildRemoved", void 0);
__decorate([
    Output("onContainerFolded")
], DiagramView.prototype, "containerFolded", void 0);
__decorate([
    Output("onContainerUnfolded")
], DiagramView.prototype, "containerUnfolded", void 0);
__decorate([
    Output("onTreeExpanded")
], DiagramView.prototype, "treeExpanded", void 0);
__decorate([
    Output("onTreeCollapsed")
], DiagramView.prototype, "treeCollapsed", void 0);
__decorate([
    Output("onSelectionModifying")
], DiagramView.prototype, "selectionModifying", void 0);
__decorate([
    Output("onRepaint")
], DiagramView.prototype, "repaint", void 0);
__decorate([
    Output("onSizeChanged")
], DiagramView.prototype, "sizeChanged", void 0);
__decorate([
    Output("onNodeSelected")
], DiagramView.prototype, "nodeSelected", void 0);
__decorate([
    Output("onNodeDeselected")
], DiagramView.prototype, "nodeDeselected", void 0);
__decorate([
    Output("onLinkSelected")
], DiagramView.prototype, "linkSelected", void 0);
__decorate([
    Output("onLinkDeselected")
], DiagramView.prototype, "linkDeselected", void 0);
__decorate([
    Output("onControlLoaded")
], DiagramView.prototype, "controlLoaded", void 0);
__decorate([
    Output("onHitTestAdjustmentHandles")
], DiagramView.prototype, "hitTestAdjustmentHandles", void 0);
__decorate([
    Output("onDrawAdjustmentHandles")
], DiagramView.prototype, "drawAdjustmentHandles", void 0);
__decorate([
    Output("onClicked")
], DiagramView.prototype, "clicked", void 0);
__decorate([
    Output("onEnterInplaceEditMode")
], DiagramView.prototype, "enterInplaceEditMode", void 0);
__decorate([
    Output("onLeaveInplaceEditMode")
], DiagramView.prototype, "leaveInplaceEditMode", void 0);
__decorate([
    Output("onCreateEditControl")
], DiagramView.prototype, "createEditControl", void 0);
__decorate([
    Output("onCellTextEdited")
], DiagramView.prototype, "cellTextEdited", void 0);
__decorate([
    Output("onLaneGridCellTextEdited")
], DiagramView.prototype, "laneGridCellTextEdited", void 0);
__decorate([
    Output("onSerializeTag")
], DiagramView.prototype, "serializeTag", void 0);
__decorate([
    Output("onDeserializeTag")
], DiagramView.prototype, "deserializeTag", void 0);
__decorate([
    Output("onTableColumnResizing")
], DiagramView.prototype, "tableColumnResizing", void 0);
__decorate([
    Output("onTableColumnResized")
], DiagramView.prototype, "tableColumnResized", void 0);
__decorate([
    Output("onTableRowResizing")
], DiagramView.prototype, "tableRowResizing", void 0);
__decorate([
    Output("onTableRowResized")
], DiagramView.prototype, "tableRowResized", void 0);
__decorate([
    Output("onNodePasted")
], DiagramView.prototype, "nodePasted", void 0);
__decorate([
    Output("onLinkPasted")
], DiagramView.prototype, "linkPasted", void 0);
__decorate([
    Output("onHeaderStartResizing")
], DiagramView.prototype, "headerStartResizing", void 0);
__decorate([
    Output("onHeaderResized")
], DiagramView.prototype, "headerResized", void 0);
__decorate([
    Output("onItemAdded")
], DiagramView.prototype, "itemAdded", void 0);
__decorate([
    Output("onItemRemoved")
], DiagramView.prototype, "itemRemoved", void 0);
__decorate([
    Output("onAnimatedLayoutCompleted")
], DiagramView.prototype, "animatedLayoutCompleted", void 0);
__decorate([
    Output("onHyperlinkClicked")
], DiagramView.prototype, "hyperlinkClicked", void 0);
__decorate([
    Output("onExpandButtonClicked")
], DiagramView.prototype, "expandButtonClicked", void 0);
DiagramView = __decorate([
    Component({
        selector: 'diagram-view',
        template: `
    <div style="position: absolute; overflow: auto; width: auto; height: auto; top: 0px; bottom: 0px; left: 0px; right: 0px; text-align: left;">
       <canvas #canvas></canvas>
    </div>`
    })
], DiagramView);

let NodeListView = class NodeListView {
    constructor() {
        this.enabled = true;
        this.icon_size = new Drawing.Size(24, 24);
        this.node_size = new Drawing.Size(24, 24);
        this.padding = 5;
        this.orientation = Diagramming.Orientation.Vertical;
        this.tooltipDelay = 1000;
        this.shapeLibraryLocation = "";
    }
    ngAfterViewInit() {
        if (this.node_id === undefined)
            this.node_id = "nodeList";
        this.canvas.nativeElement.id = this.node_id;
        this.nodeList = Diagramming.NodeListView.create(document.getElementById(this.node_id));
        this.nodeList.setEnabled(this.enabled);
        this.nodeList.setIconSize(this.icon_size);
        this.nodeList.setDefaultNodeSize(this.node_size);
        this.nodeList.setPadding(this.padding);
        this.nodeList.setOrientation(this.orientation);
        this.nodeList.setShapeLibraryLocation(this.shapeLibraryLocation);
        this.nodeList.setTooltipDelay(this.tooltipDelay);
        this.addNode(this.nodes, this.caption);
    }
    addNode(nodes, caption) {
        for (var i = 0; i < nodes.length; ++i) {
            this.nodeList.addNode(nodes[i], caption[i]);
        }
    }
};
__decorate([
    ViewChild('nodeList', { static: true })
], NodeListView.prototype, "canvas", void 0);
__decorate([
    Input('id')
], NodeListView.prototype, "node_id", void 0);
__decorate([
    Input('enabled')
], NodeListView.prototype, "enabled", void 0);
__decorate([
    Input('iconSize')
], NodeListView.prototype, "icon_size", void 0);
__decorate([
    Input('defaultNodeSize')
], NodeListView.prototype, "node_size", void 0);
__decorate([
    Input('padding')
], NodeListView.prototype, "padding", void 0);
__decorate([
    Input('orientation')
], NodeListView.prototype, "orientation", void 0);
__decorate([
    Input('tooltipDelay')
], NodeListView.prototype, "tooltipDelay", void 0);
__decorate([
    Input('shapeLibraryLocation')
], NodeListView.prototype, "shapeLibraryLocation", void 0);
__decorate([
    Input('captions')
], NodeListView.prototype, "caption", void 0);
__decorate([
    Input('nodes')
], NodeListView.prototype, "nodes", void 0);
NodeListView = __decorate([
    Component({
        selector: 'node-list-view',
        template: `<div style="overflow-y: auto; overflow-x: hidden; width: 230px; height: 200px;">
                 <canvas #nodeList width="230" height="200" ></canvas>
               </div>`
    })
], NodeListView);

let Overview = class Overview {
    constructor() {
        this.enabled = true;
        this.allow_zoom = false;
        this.back_color = "#FFFFFF";
        this.scale_factor = 17.825311942959;
        this.auto_s_amount = 0;
        this.scale_mode = Diagramming.ScaleMode.FitAll;
    }
    ngAfterViewInit() {
        if (this.view_id === undefined)
            this.view_id = "overview";
        this.canvas.nativeElement.id = this.view_id;
        var overview = Diagramming.Overview.create(document.getElementById(this.view_id));
        overview.setDiagram(this.diagram);
        overview.setEnabled(this.enabled);
        overview.setAllowZoom(this.allow_zoom);
        overview.setScaleFactor(this.scale_factor);
        overview.setAutoScrollAmount(this.auto_s_amount);
        overview.setScaleMode(this.scale_mode);
        overview.setBackColor(this.back_color);
    }
};
__decorate([
    ViewChild('overview', { static: true })
], Overview.prototype, "canvas", void 0);
__decorate([
    Input('id')
], Overview.prototype, "view_id", void 0);
__decorate([
    Input('diagram')
], Overview.prototype, "diagram", void 0);
__decorate([
    Input('enabled')
], Overview.prototype, "enabled", void 0);
__decorate([
    Input('allowZoom')
], Overview.prototype, "allow_zoom", void 0);
__decorate([
    Input('backColor')
], Overview.prototype, "back_color", void 0);
__decorate([
    Input('scaleFactor')
], Overview.prototype, "scale_factor", void 0);
__decorate([
    Input('autoScrollAmount')
], Overview.prototype, "auto_s_amount", void 0);
__decorate([
    Input('scaleMode')
], Overview.prototype, "scale_mode", void 0);
Overview = __decorate([
    Component({
        selector: 'overview',
        template: `<div style=" width: 200px; height: 200px; ">
                 <canvas #overview width="200" height="200"></canvas>
               </div>`
    })
], Overview);

let Ruler = class Ruler {
    constructor() {
        this.gr_unit = Drawing.GraphicsUnit.Millimeter;
        this.en_guides = true;
        this.vert_visible = true;
        this.hor_visible = true;
        this.pointer_color = "red";
        this.text_color = "#000000";
        this.guide_color = "#000000";
        this.projection_color = "lightSteelBlue";
        this.back_color = "#dddddd";
        this.fore_Color = "#000000";
    }
    ngAfterContentInit() {
        if (this.ruler_id === undefined)
            this.ruler_id = "ruler";
        this.div_id.nativeElement.id = this.ruler_id;
        var ruler = new Diagramming.Ruler(document.getElementById(this.ruler_id));
        if (this.input && (this.input instanceof DiagramView)) {
            ruler.setDiagram(this.input.diagram);
        }
        else {
            console.error('ruler requirs diagram-view');
        }
        ruler.setUnit(this.gr_unit);
        ruler.setEnableGuides(this.en_guides);
        ruler.setProjectRotatedBounds(this.pr_bounds);
        ruler.setNegatedX(this.neg_x);
        ruler.setNegatedY(this.neg_y);
        ruler.setVerticalScaleVisible(this.vert_visible);
        ruler.setHorizontalScaleVisible(this.hor_visible);
        ruler.setPointerColor(this.pointer_color);
        ruler.setTextColor(this.text_color);
        ruler.setGuideColor(this.guide_color);
        ruler.setProjectionColor(this.projection_color);
        ruler.setBackColor(this.back_color);
        ruler.setForeColor(this.fore_Color);
    }
};
__decorate([
    ContentChild(DiagramView)
], Ruler.prototype, "input", void 0);
__decorate([
    ViewChild('id', { static: true })
], Ruler.prototype, "div_id", void 0);
__decorate([
    Input('unit')
], Ruler.prototype, "gr_unit", void 0);
__decorate([
    Input('enableGuides')
], Ruler.prototype, "en_guides", void 0);
__decorate([
    Input('projectRotatedBounds')
], Ruler.prototype, "pr_bounds", void 0);
__decorate([
    Input('negatedY')
], Ruler.prototype, "neg_y", void 0);
__decorate([
    Input('negatedX')
], Ruler.prototype, "neg_x", void 0);
__decorate([
    Input('verticalScaleVisible')
], Ruler.prototype, "vert_visible", void 0);
__decorate([
    Input('horizontalScaleVisible')
], Ruler.prototype, "hor_visible", void 0);
__decorate([
    Input('id')
], Ruler.prototype, "ruler_id", void 0);
__decorate([
    Input('pointerColor')
], Ruler.prototype, "pointer_color", void 0);
__decorate([
    Input('textColor')
], Ruler.prototype, "text_color", void 0);
__decorate([
    Input('guideColor')
], Ruler.prototype, "guide_color", void 0);
__decorate([
    Input('projectionColor')
], Ruler.prototype, "projection_color", void 0);
__decorate([
    Input('backColor')
], Ruler.prototype, "back_color", void 0);
__decorate([
    Input('foreColor')
], Ruler.prototype, "fore_Color", void 0);
Ruler = __decorate([
    Component({
        selector: 'ruler',
        template: `<div #id>
                   <ng-content></ng-content>
               </div>`
    })
], Ruler);

let ZoomControl = class ZoomControl {
    constructor() {
        this.enabled = true;
        this.cornerRadius = 2;
        this.padding = 2;
        this.snapToZoomStep = true;
        this.tick_Position = Controls.TickPosition.Left;
        this.show_label = true;
        this.txt_color = "rgba(77,83,94,1)";
        this.sh_color = "gray";
        this.inn_color = "rgba(91,91,91,1)";
        this.br_color = "rgba(77,83,94,1)";
        this.act_Color = "skyBlue";
        this.fl = "#FFFFFF";
        this.back_color = "#FFFFFF";
        this.scr_step = 10;
        this.z_step = 10;
        this.mx_Z_fac = 200;
        this.mn_Z_fac = 0;
        this.z_fac = 100;
    }
    ngAfterViewInit() {
        if (this.zoom_id === undefined)
            this.zoom_id = "zoomer";
        this.canvas.nativeElement.id = this.zoom_id;
        var zoomer = Controls.ZoomControl.create(document.getElementById(this.zoom_id));
        zoomer.setCornerRadius(this.cornerRadius);
        zoomer.setPadding(this.padding);
        zoomer.setSnapToZoomStep(this.snapToZoomStep);
        zoomer.setTickPosition(this.tick_Position);
        zoomer.setShowLabel(this.show_label);
        zoomer.setTextColor(this.txt_color);
        zoomer.setShadowColor(this.sh_color);
        zoomer.setInnerColor(this.inn_color);
        zoomer.setBorderColor(this.br_color);
        zoomer.setActiveColor(this.act_Color);
        zoomer.setFill(this.fl);
        zoomer.setBackColor(this.back_color);
        zoomer.setScrollStep(this.scr_step);
        zoomer.setZoomStep(this.z_step);
        zoomer.setMaxZoomFactor(this.mx_Z_fac);
        zoomer.setMinZoomFactor(this.mn_Z_fac);
        zoomer.setZoomFactor(this.z_fac);
        zoomer.setEnabled(true);
        zoomer.setTarget(this.diagram);
    }
};
__decorate([
    ViewChild('zoomer', { static: true })
], ZoomControl.prototype, "canvas", void 0);
__decorate([
    Input('id')
], ZoomControl.prototype, "zoom_id", void 0);
__decorate([
    Input('diagram')
], ZoomControl.prototype, "diagram", void 0);
__decorate([
    Input('enabled')
], ZoomControl.prototype, "enabled", void 0);
__decorate([
    Input('cornerRadius')
], ZoomControl.prototype, "cornerRadius", void 0);
__decorate([
    Input('padding')
], ZoomControl.prototype, "padding", void 0);
__decorate([
    Input('snapToZoomStep')
], ZoomControl.prototype, "snapToZoomStep", void 0);
__decorate([
    Input('tickPosition')
], ZoomControl.prototype, "tick_Position", void 0);
__decorate([
    Input('showLabel')
], ZoomControl.prototype, "show_label", void 0);
__decorate([
    Input('textColor')
], ZoomControl.prototype, "txt_color", void 0);
__decorate([
    Input('shadowColor')
], ZoomControl.prototype, "sh_color", void 0);
__decorate([
    Input('innerColor')
], ZoomControl.prototype, "inn_color", void 0);
__decorate([
    Input('borderColor')
], ZoomControl.prototype, "br_color", void 0);
__decorate([
    Input('activeColor')
], ZoomControl.prototype, "act_Color", void 0);
__decorate([
    Input("fill")
], ZoomControl.prototype, "fl", void 0);
__decorate([
    Input('backColor')
], ZoomControl.prototype, "back_color", void 0);
__decorate([
    Input('scrollStep')
], ZoomControl.prototype, "scr_step", void 0);
__decorate([
    Input('zoomStep')
], ZoomControl.prototype, "z_step", void 0);
__decorate([
    Input('maxZoomFactor')
], ZoomControl.prototype, "mx_Z_fac", void 0);
__decorate([
    Input('minZoomFactor')
], ZoomControl.prototype, "mn_Z_fac", void 0);
__decorate([
    Input('zoomFactor')
], ZoomControl.prototype, "z_fac", void 0);
ZoomControl = __decorate([
    Component({
        selector: 'zoom-control',
        template: `<div style="width: 50px; height: 300px;">
                  <canvas #zoomer width="50px" height="300px"></canvas>
               </div>`
    })
], ZoomControl);

let AngularDiagram = class AngularDiagram {
};
AngularDiagram = __decorate([
    NgModule({
        declarations: [DiagramView, NodeListView, Overview, Ruler, ZoomControl],
        imports: [],
        exports: [DiagramView, NodeListView, Ruler, Overview, ZoomControl]
    })
], AngularDiagram);

const Common = MCommon;

/*
 * Public API Surface of diagram-library-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AngularDiagram, Common, DiagramView, NodeListView, Overview, Ruler, ZoomControl };
//# sourceMappingURL=diagram-library-angular.js.map
