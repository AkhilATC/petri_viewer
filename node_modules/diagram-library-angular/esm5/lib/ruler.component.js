import { __decorate } from "tslib";
import { Component, ContentChild, Input, ViewChild } from '@angular/core';
import * as MindFusion from 'diagram-library';
import { DiagramView } from './diagram-library-angular.component';
var Ruler = /** @class */ (function () {
    function Ruler() {
        this.gr_unit = MindFusion.Drawing.GraphicsUnit.Millimeter;
        this.en_guides = true;
        this.vert_visible = true;
        this.hor_visible = true;
        this.pointer_color = "red";
        this.text_color = "#000000";
        this.guide_color = "#000000";
        this.projection_color = "lightSteelBlue";
        this.back_color = "#dddddd";
        this.fore_Color = "#000000";
    }
    Ruler.prototype.ngAfterContentInit = function () {
        if (this.ruler_id === undefined)
            this.ruler_id = "ruler";
        this.div_id.nativeElement.id = this.ruler_id;
        var ruler = new MindFusion.Diagramming.Ruler(document.getElementById(this.ruler_id));
        if (this.input && (this.input instanceof DiagramView)) {
            ruler.setDiagram(this.input.diagram);
        }
        else {
            console.error('ruler requirs diagram-view');
        }
        ruler.setUnit(this.gr_unit);
        ruler.setEnableGuides(this.en_guides);
        ruler.setProjectRotatedBounds(this.pr_bounds);
        ruler.setNegatedX(this.neg_x);
        ruler.setNegatedY(this.neg_y);
        ruler.setVerticalScaleVisible(this.vert_visible);
        ruler.setHorizontalScaleVisible(this.hor_visible);
        ruler.setPointerColor(this.pointer_color);
        ruler.setTextColor(this.text_color);
        ruler.setGuideColor(this.guide_color);
        ruler.setProjectionColor(this.projection_color);
        ruler.setBackColor(this.back_color);
        ruler.setForeColor(this.fore_Color);
    };
    __decorate([
        ContentChild(DiagramView)
    ], Ruler.prototype, "input", void 0);
    __decorate([
        ViewChild('id', { static: true })
    ], Ruler.prototype, "div_id", void 0);
    __decorate([
        Input('unit')
    ], Ruler.prototype, "gr_unit", void 0);
    __decorate([
        Input('enableGuides')
    ], Ruler.prototype, "en_guides", void 0);
    __decorate([
        Input('projectRotatedBounds')
    ], Ruler.prototype, "pr_bounds", void 0);
    __decorate([
        Input('negatedY')
    ], Ruler.prototype, "neg_y", void 0);
    __decorate([
        Input('negatedX')
    ], Ruler.prototype, "neg_x", void 0);
    __decorate([
        Input('verticalScaleVisible')
    ], Ruler.prototype, "vert_visible", void 0);
    __decorate([
        Input('horizontalScaleVisible')
    ], Ruler.prototype, "hor_visible", void 0);
    __decorate([
        Input('id')
    ], Ruler.prototype, "ruler_id", void 0);
    __decorate([
        Input('pointerColor')
    ], Ruler.prototype, "pointer_color", void 0);
    __decorate([
        Input('textColor')
    ], Ruler.prototype, "text_color", void 0);
    __decorate([
        Input('guideColor')
    ], Ruler.prototype, "guide_color", void 0);
    __decorate([
        Input('projectionColor')
    ], Ruler.prototype, "projection_color", void 0);
    __decorate([
        Input('backColor')
    ], Ruler.prototype, "back_color", void 0);
    __decorate([
        Input('foreColor')
    ], Ruler.prototype, "fore_Color", void 0);
    Ruler = __decorate([
        Component({
            selector: 'ruler',
            template: "<div #id>\n                   <ng-content></ng-content>\n               </div>"
        })
    ], Ruler);
    return Ruler;
}());
export { Ruler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vZGlhZ3JhbS1saWJyYXJ5LWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvcnVsZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFlBQVksRUFBb0IsS0FBSyxFQUFFLFNBQVMsRUFBYyxNQUFNLGVBQWUsQ0FBQTtBQUMvRyxPQUFPLEtBQUssVUFBVSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQVFsRTtJQUFBO1FBSW1CLFlBQU8sR0FBb0MsVUFBVSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO1FBRTlFLGNBQVMsR0FBWSxJQUFJLENBQUM7UUFJbEIsaUJBQVksR0FBWSxJQUFJLENBQUM7UUFDM0IsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFHdEMsa0JBQWEsR0FBVyxLQUFLLENBQUM7UUFDakMsZUFBVSxHQUFXLFNBQVMsQ0FBQztRQUM5QixnQkFBVyxHQUFXLFNBQVMsQ0FBQztRQUMzQixxQkFBZ0IsR0FBVyxnQkFBZ0IsQ0FBQztRQUNsRCxlQUFVLEdBQVcsU0FBUyxDQUFDO1FBQy9CLGVBQVUsR0FBVyxTQUFTLENBQUM7SUFpQ3ZELENBQUM7SUE5Qkcsa0NBQWtCLEdBQWxCO1FBR0ksSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVM7WUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDN0MsSUFBSSxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFlBQVksV0FBVyxDQUFDLEVBQUU7WUFDbkQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hDO2FBQU07WUFDSCxPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7U0FDL0M7UUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixLQUFLLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QyxLQUFLLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDakQsS0FBSyxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRCxLQUFLLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMxQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0QyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDaEQsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFHeEMsQ0FBQztJQWhEMEI7UUFBMUIsWUFBWSxDQUFDLFdBQVcsQ0FBQzt3Q0FBb0I7SUFDWDtRQUFsQyxTQUFTLENBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO3lDQUFvQztJQUN2RDtRQUFkLEtBQUssQ0FBQyxNQUFNLENBQUM7MENBQXVGO0lBRTlFO1FBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7NENBQTJCO0lBQ2xCO1FBQTlCLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQzs0Q0FBb0I7SUFDL0I7UUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQzt3Q0FBZ0I7SUFDZjtRQUFsQixLQUFLLENBQUMsVUFBVSxDQUFDO3dDQUFnQjtJQUNIO1FBQTlCLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQzsrQ0FBOEI7SUFDM0I7UUFBaEMsS0FBSyxDQUFDLHdCQUF3QixDQUFDOzhDQUE2QjtJQUVoRDtRQUFaLEtBQUssQ0FBQyxJQUFJLENBQUM7MkNBQWtCO0lBQ1A7UUFBdEIsS0FBSyxDQUFDLGNBQWMsQ0FBQztnREFBK0I7SUFDakM7UUFBbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQzs2Q0FBZ0M7SUFDOUI7UUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzs4Q0FBaUM7SUFDM0I7UUFBekIsS0FBSyxDQUFDLGlCQUFpQixDQUFDO21EQUE2QztJQUNsRDtRQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDOzZDQUFnQztJQUMvQjtRQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDOzZDQUFnQztJQW5CMUMsS0FBSztRQU5qQixTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsT0FBTztZQUNqQixRQUFRLEVBQUUsZ0ZBRVE7U0FDckIsQ0FBQztPQUNXLEtBQUssQ0FvRGpCO0lBQUQsWUFBQztDQUFBLEFBcERELElBb0RDO1NBcERZLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgQ29udGVudENoaWxkLCBBZnRlckNvbnRlbnRJbml0LCBJbnB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0ICogYXMgTWluZEZ1c2lvbiBmcm9tICdkaWFncmFtLWxpYnJhcnknO1xyXG5pbXBvcnQgeyBEaWFncmFtVmlldyB9IGZyb20gJy4vZGlhZ3JhbS1saWJyYXJ5LWFuZ3VsYXIuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdydWxlcicsXHJcbiAgICB0ZW1wbGF0ZTogYDxkaXYgI2lkPlxyXG4gICAgICAgICAgICAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgICAgICAgICAgICA8L2Rpdj5gXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSdWxlciBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xyXG5cclxuICAgIEBDb250ZW50Q2hpbGQoRGlhZ3JhbVZpZXcpIGlucHV0OiBEaWFncmFtVmlldztcclxuICAgIEBWaWV3Q2hpbGQoJ2lkJywgeyBzdGF0aWM6IHRydWUgfSkgZGl2X2lkOiBFbGVtZW50UmVmPEhUTUxEaXZFbGVtZW50PjtcclxuICAgIEBJbnB1dCgndW5pdCcpIGdyX3VuaXQ6IE1pbmRGdXNpb24uRHJhd2luZy5HcmFwaGljc1VuaXQgPSBNaW5kRnVzaW9uLkRyYXdpbmcuR3JhcGhpY3NVbml0Lk1pbGxpbWV0ZXI7XHJcblxyXG4gICAgQElucHV0KCdlbmFibGVHdWlkZXMnKSBlbl9ndWlkZXM6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgQElucHV0KCdwcm9qZWN0Um90YXRlZEJvdW5kcycpIHByX2JvdW5kczogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgnbmVnYXRlZFknKSBuZWdfeTogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgnbmVnYXRlZFgnKSBuZWdfeDogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgndmVydGljYWxTY2FsZVZpc2libGUnKSB2ZXJ0X3Zpc2libGU6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgQElucHV0KCdob3Jpem9udGFsU2NhbGVWaXNpYmxlJykgaG9yX3Zpc2libGU6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIEBJbnB1dCgnaWQnKSBydWxlcl9pZDogc3RyaW5nO1xyXG4gICAgQElucHV0KCdwb2ludGVyQ29sb3InKSBwb2ludGVyX2NvbG9yOiBzdHJpbmcgPSBcInJlZFwiO1xyXG4gICAgQElucHV0KCd0ZXh0Q29sb3InKSB0ZXh0X2NvbG9yOiBzdHJpbmcgPSBcIiMwMDAwMDBcIjtcclxuICAgIEBJbnB1dCgnZ3VpZGVDb2xvcicpIGd1aWRlX2NvbG9yOiBzdHJpbmcgPSBcIiMwMDAwMDBcIjtcclxuICAgIEBJbnB1dCgncHJvamVjdGlvbkNvbG9yJykgcHJvamVjdGlvbl9jb2xvcjogc3RyaW5nID0gXCJsaWdodFN0ZWVsQmx1ZVwiO1xyXG4gICAgQElucHV0KCdiYWNrQ29sb3InKSBiYWNrX2NvbG9yOiBzdHJpbmcgPSBcIiNkZGRkZGRcIjtcclxuICAgIEBJbnB1dCgnZm9yZUNvbG9yJykgZm9yZV9Db2xvcjogc3RyaW5nID0gXCIjMDAwMDAwXCI7XHJcblxyXG5cclxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLnJ1bGVyX2lkID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMucnVsZXJfaWQgPSBcInJ1bGVyXCI7XHJcbiAgICAgICAgdGhpcy5kaXZfaWQubmF0aXZlRWxlbWVudC5pZCA9IHRoaXMucnVsZXJfaWQ7XHJcbiAgICAgICAgdmFyIHJ1bGVyID0gbmV3IE1pbmRGdXNpb24uRGlhZ3JhbW1pbmcuUnVsZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5ydWxlcl9pZCkpO1xyXG4gICAgICAgIGlmICh0aGlzLmlucHV0ICYmICh0aGlzLmlucHV0IGluc3RhbmNlb2YgRGlhZ3JhbVZpZXcpKSB7XHJcbiAgICAgICAgICAgIHJ1bGVyLnNldERpYWdyYW0odGhpcy5pbnB1dC5kaWFncmFtKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdydWxlciByZXF1aXJzIGRpYWdyYW0tdmlldycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcnVsZXIuc2V0VW5pdCh0aGlzLmdyX3VuaXQpO1xyXG4gICAgICAgIHJ1bGVyLnNldEVuYWJsZUd1aWRlcyh0aGlzLmVuX2d1aWRlcyk7XHJcbiAgICAgICAgcnVsZXIuc2V0UHJvamVjdFJvdGF0ZWRCb3VuZHModGhpcy5wcl9ib3VuZHMpO1xyXG4gICAgICAgIHJ1bGVyLnNldE5lZ2F0ZWRYKHRoaXMubmVnX3gpO1xyXG4gICAgICAgIHJ1bGVyLnNldE5lZ2F0ZWRZKHRoaXMubmVnX3kpO1xyXG4gICAgICAgIHJ1bGVyLnNldFZlcnRpY2FsU2NhbGVWaXNpYmxlKHRoaXMudmVydF92aXNpYmxlKTtcclxuICAgICAgICBydWxlci5zZXRIb3Jpem9udGFsU2NhbGVWaXNpYmxlKHRoaXMuaG9yX3Zpc2libGUpO1xyXG4gICAgICAgIHJ1bGVyLnNldFBvaW50ZXJDb2xvcih0aGlzLnBvaW50ZXJfY29sb3IpO1xyXG4gICAgICAgIHJ1bGVyLnNldFRleHRDb2xvcih0aGlzLnRleHRfY29sb3IpO1xyXG4gICAgICAgIHJ1bGVyLnNldEd1aWRlQ29sb3IodGhpcy5ndWlkZV9jb2xvcik7XHJcbiAgICAgICAgcnVsZXIuc2V0UHJvamVjdGlvbkNvbG9yKHRoaXMucHJvamVjdGlvbl9jb2xvcik7XHJcbiAgICAgICAgcnVsZXIuc2V0QmFja0NvbG9yKHRoaXMuYmFja19jb2xvcik7XHJcbiAgICAgICAgcnVsZXIuc2V0Rm9yZUNvbG9yKHRoaXMuZm9yZV9Db2xvcik7XHJcblxyXG5cclxuICAgIH1cclxuXHJcbn0iXX0=