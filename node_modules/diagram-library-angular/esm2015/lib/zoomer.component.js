import { __decorate } from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import * as MindFusion from 'diagram-library';
let ZoomControl = class ZoomControl {
    constructor() {
        this.enabled = true;
        this.cornerRadius = 2;
        this.padding = 2;
        this.snapToZoomStep = true;
        this.tick_Position = MindFusion.Controls.TickPosition.Left;
        this.show_label = true;
        this.txt_color = "rgba(77,83,94,1)";
        this.sh_color = "gray";
        this.inn_color = "rgba(91,91,91,1)";
        this.br_color = "rgba(77,83,94,1)";
        this.act_Color = "skyBlue";
        this.fl = "#FFFFFF";
        this.back_color = "#FFFFFF";
        this.scr_step = 10;
        this.z_step = 10;
        this.mx_Z_fac = 200;
        this.mn_Z_fac = 0;
        this.z_fac = 100;
    }
    ngAfterViewInit() {
        if (this.zoom_id === undefined)
            this.zoom_id = "zoomer";
        this.canvas.nativeElement.id = this.zoom_id;
        var zoomer = MindFusion.Controls.ZoomControl.create(document.getElementById(this.zoom_id));
        zoomer.setCornerRadius(this.cornerRadius);
        zoomer.setPadding(this.padding);
        zoomer.setSnapToZoomStep(this.snapToZoomStep);
        zoomer.setTickPosition(this.tick_Position);
        zoomer.setShowLabel(this.show_label);
        zoomer.setTextColor(this.txt_color);
        zoomer.setShadowColor(this.sh_color);
        zoomer.setInnerColor(this.inn_color);
        zoomer.setBorderColor(this.br_color);
        zoomer.setActiveColor(this.act_Color);
        zoomer.setFill(this.fl);
        zoomer.setBackColor(this.back_color);
        zoomer.setScrollStep(this.scr_step);
        zoomer.setZoomStep(this.z_step);
        zoomer.setMaxZoomFactor(this.mx_Z_fac);
        zoomer.setMinZoomFactor(this.mn_Z_fac);
        zoomer.setZoomFactor(this.z_fac);
        zoomer.setEnabled(true);
        zoomer.setTarget(this.diagram);
    }
};
__decorate([
    ViewChild('zoomer', { static: true })
], ZoomControl.prototype, "canvas", void 0);
__decorate([
    Input('id')
], ZoomControl.prototype, "zoom_id", void 0);
__decorate([
    Input('diagram')
], ZoomControl.prototype, "diagram", void 0);
__decorate([
    Input('enabled')
], ZoomControl.prototype, "enabled", void 0);
__decorate([
    Input('cornerRadius')
], ZoomControl.prototype, "cornerRadius", void 0);
__decorate([
    Input('padding')
], ZoomControl.prototype, "padding", void 0);
__decorate([
    Input('snapToZoomStep')
], ZoomControl.prototype, "snapToZoomStep", void 0);
__decorate([
    Input('tickPosition')
], ZoomControl.prototype, "tick_Position", void 0);
__decorate([
    Input('showLabel')
], ZoomControl.prototype, "show_label", void 0);
__decorate([
    Input('textColor')
], ZoomControl.prototype, "txt_color", void 0);
__decorate([
    Input('shadowColor')
], ZoomControl.prototype, "sh_color", void 0);
__decorate([
    Input('innerColor')
], ZoomControl.prototype, "inn_color", void 0);
__decorate([
    Input('borderColor')
], ZoomControl.prototype, "br_color", void 0);
__decorate([
    Input('activeColor')
], ZoomControl.prototype, "act_Color", void 0);
__decorate([
    Input("fill")
], ZoomControl.prototype, "fl", void 0);
__decorate([
    Input('backColor')
], ZoomControl.prototype, "back_color", void 0);
__decorate([
    Input('scrollStep')
], ZoomControl.prototype, "scr_step", void 0);
__decorate([
    Input('zoomStep')
], ZoomControl.prototype, "z_step", void 0);
__decorate([
    Input('maxZoomFactor')
], ZoomControl.prototype, "mx_Z_fac", void 0);
__decorate([
    Input('minZoomFactor')
], ZoomControl.prototype, "mn_Z_fac", void 0);
__decorate([
    Input('zoomFactor')
], ZoomControl.prototype, "z_fac", void 0);
ZoomControl = __decorate([
    Component({
        selector: 'zoom-control',
        template: `<div style="width: 50px; height: 300px;">
                  <canvas #zoomer width="50px" height="300px"></canvas>
               </div>`
    })
], ZoomControl);
export { ZoomControl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9vbWVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2RpYWdyYW0tbGlicmFyeS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL3pvb21lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWlCLEtBQUssRUFBRSxTQUFTLEVBQWMsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxLQUFLLFVBQVUsTUFBTSxpQkFBaUIsQ0FBQztBQVE5QyxJQUFhLFdBQVcsR0FBeEIsTUFBYSxXQUFXO0lBQXhCO1FBS3NCLFlBQU8sR0FBYSxJQUFJLENBQUM7UUFDcEIsaUJBQVksR0FBWSxDQUFDLENBQUM7UUFDL0IsWUFBTyxHQUFZLENBQUMsQ0FBQztRQUNkLG1CQUFjLEdBQWEsSUFBSSxDQUFDO1FBQ2xDLGtCQUFhLEdBQXNDLFVBQVUsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztRQUM1RixlQUFVLEdBQWEsSUFBSSxDQUFDO1FBQzVCLGNBQVMsR0FBWSxrQkFBa0IsQ0FBQztRQUN0QyxhQUFRLEdBQVksTUFBTSxDQUFDO1FBQzVCLGNBQVMsR0FBWSxrQkFBa0IsQ0FBQztRQUN2QyxhQUFRLEdBQVcsa0JBQWtCLENBQUM7UUFDdEMsY0FBUyxHQUFZLFNBQVMsQ0FBQztRQUN0QyxPQUFFLEdBQVcsU0FBUyxDQUFDO1FBQ2xCLGVBQVUsR0FBVyxTQUFTLENBQUM7UUFDOUIsYUFBUSxHQUFZLEVBQUUsQ0FBQztRQUN6QixXQUFNLEdBQVksRUFBRSxDQUFDO1FBQ2hCLGFBQVEsR0FBWSxHQUFHLENBQUM7UUFDeEIsYUFBUSxHQUFZLENBQUMsQ0FBQztRQUN6QixVQUFLLEdBQVcsR0FBRyxDQUFDO0lBZ0M3QyxDQUFDO0lBNUJHLGVBQWU7UUFFWCxJQUFHLElBQUksQ0FBQyxPQUFPLEtBQUssU0FBUztZQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUU1QixJQUFJLENB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Z0M7QUFDOUI7SUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzs2Q0FBd0I7QUFDekI7SUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQzsyQ0FBc0I7QUFDaEI7SUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQzs2Q0FBeUI7QUFDeEI7SUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQzs2Q0FBdUI7QUFDekI7SUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzswQ0FBcUI7QUF0QmhDLFdBQVc7SUFOdkIsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGNBQWM7UUFDeEIsUUFBUSxFQUFFOztzQkFFUTtLQUNyQixDQUFDO0dBQ1csV0FBVyxDQXNEdkI7U0F0RFksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQWZ0ZXJWaWV3SW5pdCwgSW5wdXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBNaW5kRnVzaW9uIGZyb20gJ2RpYWdyYW0tbGlicmFyeSc7XHJcbmltcG9ydCBEaWFncmFtID0gTWluZEZ1c2lvbi5EaWFncmFtbWluZy5EaWFncmFtO1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnem9vbS1jb250cm9sJyxcclxuICAgIHRlbXBsYXRlOiBgPGRpdiBzdHlsZT1cIndpZHRoOiA1MHB4OyBoZWlnaHQ6IDMwMHB4O1wiPlxyXG4gICAgICAgICAgICAgICAgICA8Y2FudmFzICN6b29tZXIgd2lkdGg9XCI1MHB4XCIgaGVpZ2h0PVwiMzAwcHhcIj48L2NhbnZhcz5cclxuICAgICAgICAgICAgICAgPC9kaXY+YFxyXG59KVxyXG5leHBvcnQgY2xhc3MgWm9vbUNvbnRyb2wgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0e1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ3pvb21lcicsIHsgc3RhdGljOiB0cnVlIH0pIGNhbnZhczogRWxlbWVudFJlZjxIVE1MQ2FudmFzRWxlbWVudD47XHJcbiAgICBASW5wdXQoJ2lkJykgem9vbV9pZCA6IHN0cmluZztcclxuICAgIEBJbnB1dCgnZGlhZ3JhbScpIGRpYWdyYW0gOiBEaWFncmFtO1xyXG4gICAgQElucHV0KCdlbmFibGVkJykgZW5hYmxlZCA6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgQElucHV0KCdjb3JuZXJSYWRpdXMnKSBjb3JuZXJSYWRpdXMgOiBudW1iZXIgPSAyO1xyXG4gICAgQElucHV0KCdwYWRkaW5nJykgcGFkZGluZyA6IG51bWJlciA9IDI7XHJcbiAgICBASW5wdXQoJ3NuYXBUb1pvb21TdGVwJykgc25hcFRvWm9vbVN0ZXAgOiBib29sZWFuID0gdHJ1ZTtcclxuICAgIEBJbnB1dCgndGlja1Bvc2l0aW9uJykgdGlja19Qb3NpdGlvbiA6IE1pbmRGdXNpb24uQ29udHJvbHMuVGlja1Bvc2l0aW9uID0gTWluZEZ1c2lvbi5Db250cm9scy5UaWNrUG9zaXRpb24uTGVmdDtcclxuICAgIEBJbnB1dCgnc2hvd0xhYmVsJykgc2hvd19sYWJlbCA6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgQElucHV0KCd0ZXh0Q29sb3InKSB0eHRfY29sb3IgOiBzdHJpbmcgPSBcInJnYmEoNzcsODMsOTQsMSlcIjtcclxuICAgIEBJbnB1dCgnc2hhZG93Q29sb3InKSBzaF9jb2xvciA6IHN0cmluZyA9IFwiZ3JheVwiO1xyXG4gICAgQElucHV0KCdpbm5lckNvbG9yJykgaW5uX2NvbG9yIDogc3RyaW5nID0gXCJyZ2JhKDkxLDkxLDkxLDEpXCI7XHJcbiAgICBASW5wdXQoJ2JvcmRlckNvbG9yJykgYnJfY29sb3IgOnN0cmluZyA9IFwicmdiYSg3Nyw4Myw5NCwxKVwiO1xyXG4gICAgQElucHV0KCdhY3RpdmVDb2xvcicpIGFjdF9Db2xvciA6IHN0cmluZyA9IFwic2t5Qmx1ZVwiO1xyXG4gICAgQElucHV0KFwiZmlsbFwiKSBmbDogc3RyaW5nID0gXCIjRkZGRkZGXCI7XHJcbiAgICBASW5wdXQoJ2JhY2tDb2xvcicpIGJhY2tfY29sb3I6IHN0cmluZyA9IFwiI0ZGRkZGRlwiO1xyXG4gICAgQElucHV0KCdzY3JvbGxTdGVwJykgc2NyX3N0ZXAgOiBudW1iZXIgPSAxMDtcclxuICAgIEBJbnB1dCgnem9vbVN0ZXAnKSB6X3N0ZXAgOiBudW1iZXIgPSAxMDtcclxuICAgIEBJbnB1dCgnbWF4Wm9vbUZhY3RvcicpIG14X1pfZmFjIDogbnVtYmVyID0gMjAwO1xyXG4gICAgQElucHV0KCdtaW5ab29tRmFjdG9yJykgbW5fWl9mYWMgOiBudW1iZXIgPSAwO1xyXG4gICAgQElucHV0KCd6b29tRmFjdG9yJykgel9mYWM6IG51bWJlciA9IDEwMDtcclxuXHJcblxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lke1xyXG5cclxuICAgICAgICBpZih0aGlzLnpvb21faWQgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy56b29tX2lkID0gXCJ6b29tZXJcIjtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmNhbnZhcy5uYXRpdmVFbGVtZW50LmlkID0gdGhpcy56b29tX2lkOyAgICBcclxuICAgICAgICB2YXIgem9vbWVyID0gTWluZEZ1c2lvbi5Db250cm9scy5ab29tQ29udHJvbC5jcmVhdGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy56b29tX2lkKSk7XHJcbiAgICAgICAgem9vbWVyLnNldENvcm5lclJhZGl1cyh0aGlzLmNvcm5lclJhZGl1cyk7XHJcbiAgICAgICAgem9vbWVyLnNldFBhZGRpbmcodGhpcy5wYWRkaW5nKTtcclxuICAgICAgICB6b29tZXIuc2V0U25hcFRvWm9vbVN0ZXAodGhpcy5zbmFwVG9ab29tU3RlcCk7XHJcbiAgICAgICAgem9vbWVyLnNldFRpY2tQb3NpdGlvbih0aGlzLnRpY2tfUG9zaXRpb24pO1xyXG4gICAgICAgIHpvb21lci5zZXRTaG93TGFiZWwodGhpcy5zaG93X2xhYmVsKTtcclxuICAgICAgICB6b29tZXIuc2V0VGV4dENvbG9yKHRoaXMudHh0X2NvbG9yKTtcclxuICAgICAgICB6b29tZXIuc2V0U2hhZG93Q29sb3IodGhpcy5zaF9jb2xvcik7XHJcbiAgICAgICAgem9vbWVyLnNldElubmVyQ29sb3IodGhpcy5pbm5fY29sb3IpO1xyXG4gICAgICAgIHpvb21lci5zZXRCb3JkZXJDb2xvcih0aGlzLmJyX2NvbG9yKTtcclxuICAgICAgICB6b29tZXIuc2V0QWN0aXZlQ29sb3IodGhpcy5hY3RfQ29sb3IpO1xyXG4gICAgICAgIHpvb21lci5zZXRGaWxsKHRoaXMuZmwpO1xyXG4gICAgICAgIHpvb21lci5zZXRCYWNrQ29sb3IodGhpcy5iYWNrX2NvbG9yKTtcclxuICAgICAgICB6b29tZXIuc2V0U2Nyb2xsU3RlcCh0aGlzLnNjcl9zdGVwKTtcclxuICAgICAgICB6b29tZXIuc2V0Wm9vbVN0ZXAodGhpcy56X3N0ZXApO1xyXG4gICAgICAgIHpvb21lci5zZXRNYXhab29tRmFjdG9yKHRoaXMubXhfWl9mYWMpO1xyXG4gICAgICAgIHpvb21lci5zZXRNaW5ab29tRmFjdG9yKHRoaXMubW5fWl9mYWMpO1xyXG4gICAgICAgIHpvb21lci5zZXRab29tRmFjdG9yKHRoaXMuel9mYWMpO1xyXG4gICAgICAgIHpvb21lci5zZXRFbmFibGVkKHRydWUpO1xyXG4gICAgICAgIHpvb21lci5zZXRUYXJnZXQodGhpcy5kaWFncmFtKTtcclxuXHJcbiAgICB9XHJcbn0iXX0=