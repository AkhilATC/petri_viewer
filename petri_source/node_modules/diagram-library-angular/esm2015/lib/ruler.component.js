import { __decorate } from "tslib";
import { Component, ContentChild, Input, ViewChild } from '@angular/core';
import * as MindFusion from 'diagram-library';
import { DiagramView } from './diagram-library-angular.component';
let Ruler = class Ruler {
    constructor() {
        this.gr_unit = MindFusion.Drawing.GraphicsUnit.Millimeter;
        this.en_guides = true;
        this.vert_visible = true;
        this.hor_visible = true;
        this.pointer_color = "red";
        this.text_color = "#000000";
        this.guide_color = "#000000";
        this.projection_color = "lightSteelBlue";
        this.back_color = "#dddddd";
        this.fore_Color = "#000000";
    }
    ngAfterContentInit() {
        if (this.ruler_id === undefined)
            this.ruler_id = "ruler";
        this.div_id.nativeElement.id = this.ruler_id;
        var ruler = new MindFusion.Diagramming.Ruler(document.getElementById(this.ruler_id));
        if (this.input && (this.input instanceof DiagramView)) {
            ruler.setDiagram(this.input.diagram);
        }
        else {
            console.error('ruler requirs diagram-view');
        }
        ruler.setUnit(this.gr_unit);
        ruler.setEnableGuides(this.en_guides);
        ruler.setProjectRotatedBounds(this.pr_bounds);
        ruler.setNegatedX(this.neg_x);
        ruler.setNegatedY(this.neg_y);
        ruler.setVerticalScaleVisible(this.vert_visible);
        ruler.setHorizontalScaleVisible(this.hor_visible);
        ruler.setPointerColor(this.pointer_color);
        ruler.setTextColor(this.text_color);
        ruler.setGuideColor(this.guide_color);
        ruler.setProjectionColor(this.projection_color);
        ruler.setBackColor(this.back_color);
        ruler.setForeColor(this.fore_Color);
    }
};
__decorate([
    ContentChild(DiagramView)
], Ruler.prototype, "input", void 0);
__decorate([
    ViewChild('id', { static: true })
], Ruler.prototype, "div_id", void 0);
__decorate([
    Input('unit')
], Ruler.prototype, "gr_unit", void 0);
__decorate([
    Input('enableGuides')
], Ruler.prototype, "en_guides", void 0);
__decorate([
    Input('projectRotatedBounds')
], Ruler.prototype, "pr_bounds", void 0);
__decorate([
    Input('negatedY')
], Ruler.prototype, "neg_y", void 0);
__decorate([
    Input('negatedX')
], Ruler.prototype, "neg_x", void 0);
__decorate([
    Input('verticalScaleVisible')
], Ruler.prototype, "vert_visible", void 0);
__decorate([
    Input('horizontalScaleVisible')
], Ruler.prototype, "hor_visible", void 0);
__decorate([
    Input('id')
], Ruler.prototype, "ruler_id", void 0);
__decorate([
    Input('pointerColor')
], Ruler.prototype, "pointer_color", void 0);
__decorate([
    Input('textColor')
], Ruler.prototype, "text_color", void 0);
__decorate([
    Input('guideColor')
], Ruler.prototype, "guide_color", void 0);
__decorate([
    Input('projectionColor')
], Ruler.prototype, "projection_color", void 0);
__decorate([
    Input('backColor')
], Ruler.prototype, "back_color", void 0);
__decorate([
    Input('foreColor')
], Ruler.prototype, "fore_Color", void 0);
Ruler = __decorate([
    Component({
        selector: 'ruler',
        template: `<div #id>
                   <ng-content></ng-content>
               </div>`
    })
], Ruler);
export { Ruler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vZGlhZ3JhbS1saWJyYXJ5LWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvcnVsZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFlBQVksRUFBb0IsS0FBSyxFQUFFLFNBQVMsRUFBYyxNQUFNLGVBQWUsQ0FBQTtBQUMvRyxPQUFPLEtBQUssVUFBVSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQVFsRSxJQUFhLEtBQUssR0FBbEIsTUFBYSxLQUFLO0lBQWxCO1FBSW1CLFlBQU8sR0FBb0MsVUFBVSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO1FBRTlFLGNBQVMsR0FBWSxJQUFJLENBQUM7UUFJbEIsaUJBQVksR0FBWSxJQUFJLENBQUM7UUFDM0IsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFHdEMsa0JBQWEsR0FBVyxLQUFLLENBQUM7UUFDakMsZUFBVSxHQUFXLFNBQVMsQ0FBQztRQUM5QixnQkFBVyxHQUFXLFNBQVMsQ0FBQztRQUMzQixxQkFBZ0IsR0FBVyxnQkFBZ0IsQ0FBQztRQUNsRCxlQUFVLEdBQVcsU0FBUyxDQUFDO1FBQy9CLGVBQVUsR0FBVyxTQUFTLENBQUM7SUFpQ3ZELENBQUM7SUE5Qkcsa0JBQWtCO1FBR2QsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVM7WUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDN0MsSUFBSSxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFlBQVksV0FBVyxDQUFDLEVBQUU7WUFDbkQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hDO2FBQU07WUFDSCxPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7U0FDL0M7UUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixLQUFLLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QyxLQUFLLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDakQsS0FBSyxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRCxLQUFLLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMxQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0QyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDaEQsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFHeEMsQ0FBQztDQUVKLENBQUE7QUFsRDhCO0lBQTFCLFlBQVksQ0FBQyxXQUFXLENBQUM7b0NBQW9CO0FBQ1g7SUFBbEMsU0FBUyxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztxQ0FBb0M7QUFDdkQ7SUFBZCxLQUFLLENBQUMsTUFBTSxDQUFDO3NDQUF1RjtBQUU5RTtJQUF0QixLQUFLLENBQUMsY0FBYyxDQUFDO3dDQUEyQjtBQUNsQjtJQUE5QixLQUFLLENBQUMsc0JBQXNCLENBQUM7d0NBQW9CO0FBQy9CO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7b0NBQWdCO0FBQ2Y7SUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQztvQ0FBZ0I7QUFDSDtJQUE5QixLQUFLLENBQUMsc0JBQXNCLENBQUM7MkNBQThCO0FBQzNCO0lBQWhDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQzswQ0FBNkI7QUFFaEQ7SUFBWixLQUFLLENBQUMsSUFBSSxDQUFDO3VDQUFrQjtBQUNQO0lBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7NENBQStCO0FBQ2pDO0lBQW5CLEtBQUssQ0FBQyxXQUFXLENBQUM7eUNBQWdDO0FBQzlCO0lBQXBCLEtBQUssQ0FBQyxZQUFZLENBQUM7MENBQWlDO0FBQzNCO0lBQXpCLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQzsrQ0FBNkM7QUFDbEQ7SUFBbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQzt5Q0FBZ0M7QUFDL0I7SUFBbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQzt5Q0FBZ0M7QUFuQjFDLEtBQUs7SUFOakIsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE9BQU87UUFDakIsUUFBUSxFQUFFOztzQkFFUTtLQUNyQixDQUFDO0dBQ1csS0FBSyxDQW9EakI7U0FwRFksS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBDb250ZW50Q2hpbGQsIEFmdGVyQ29udGVudEluaXQsIElucHV0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgKiBhcyBNaW5kRnVzaW9uIGZyb20gJ2RpYWdyYW0tbGlicmFyeSc7XHJcbmltcG9ydCB7IERpYWdyYW1WaWV3IH0gZnJvbSAnLi9kaWFncmFtLWxpYnJhcnktYW5ndWxhci5jb21wb25lbnQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3J1bGVyJyxcclxuICAgIHRlbXBsYXRlOiBgPGRpdiAjaWQ+XHJcbiAgICAgICAgICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgICAgICAgICAgICAgIDwvZGl2PmBcclxufSlcclxuZXhwb3J0IGNsYXNzIFJ1bGVyIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XHJcblxyXG4gICAgQENvbnRlbnRDaGlsZChEaWFncmFtVmlldykgaW5wdXQ6IERpYWdyYW1WaWV3O1xyXG4gICAgQFZpZXdDaGlsZCgnaWQnLCB7IHN0YXRpYzogdHJ1ZSB9KSBkaXZfaWQ6IEVsZW1lbnRSZWY8SFRNTERpdkVsZW1lbnQ+O1xyXG4gICAgQElucHV0KCd1bml0JykgZ3JfdW5pdDogTWluZEZ1c2lvbi5EcmF3aW5nLkdyYXBoaWNzVW5pdCA9IE1pbmRGdXNpb24uRHJhd2luZy5HcmFwaGljc1VuaXQuTWlsbGltZXRlcjtcclxuXHJcbiAgICBASW5wdXQoJ2VuYWJsZUd1aWRlcycpIGVuX2d1aWRlczogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBASW5wdXQoJ3Byb2plY3RSb3RhdGVkQm91bmRzJykgcHJfYm91bmRzOiBib29sZWFuO1xyXG4gICAgQElucHV0KCduZWdhdGVkWScpIG5lZ195OiBib29sZWFuO1xyXG4gICAgQElucHV0KCduZWdhdGVkWCcpIG5lZ194OiBib29sZWFuO1xyXG4gICAgQElucHV0KCd2ZXJ0aWNhbFNjYWxlVmlzaWJsZScpIHZlcnRfdmlzaWJsZTogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBASW5wdXQoJ2hvcml6b250YWxTY2FsZVZpc2libGUnKSBob3JfdmlzaWJsZTogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgQElucHV0KCdpZCcpIHJ1bGVyX2lkOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ3BvaW50ZXJDb2xvcicpIHBvaW50ZXJfY29sb3I6IHN0cmluZyA9IFwicmVkXCI7XHJcbiAgICBASW5wdXQoJ3RleHRDb2xvcicpIHRleHRfY29sb3I6IHN0cmluZyA9IFwiIzAwMDAwMFwiO1xyXG4gICAgQElucHV0KCdndWlkZUNvbG9yJykgZ3VpZGVfY29sb3I6IHN0cmluZyA9IFwiIzAwMDAwMFwiO1xyXG4gICAgQElucHV0KCdwcm9qZWN0aW9uQ29sb3InKSBwcm9qZWN0aW9uX2NvbG9yOiBzdHJpbmcgPSBcImxpZ2h0U3RlZWxCbHVlXCI7XHJcbiAgICBASW5wdXQoJ2JhY2tDb2xvcicpIGJhY2tfY29sb3I6IHN0cmluZyA9IFwiI2RkZGRkZFwiO1xyXG4gICAgQElucHV0KCdmb3JlQ29sb3InKSBmb3JlX0NvbG9yOiBzdHJpbmcgPSBcIiMwMDAwMDBcIjtcclxuXHJcblxyXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucnVsZXJfaWQgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5ydWxlcl9pZCA9IFwicnVsZXJcIjtcclxuICAgICAgICB0aGlzLmRpdl9pZC5uYXRpdmVFbGVtZW50LmlkID0gdGhpcy5ydWxlcl9pZDtcclxuICAgICAgICB2YXIgcnVsZXIgPSBuZXcgTWluZEZ1c2lvbi5EaWFncmFtbWluZy5SdWxlcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnJ1bGVyX2lkKSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5wdXQgJiYgKHRoaXMuaW5wdXQgaW5zdGFuY2VvZiBEaWFncmFtVmlldykpIHtcclxuICAgICAgICAgICAgcnVsZXIuc2V0RGlhZ3JhbSh0aGlzLmlucHV0LmRpYWdyYW0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3J1bGVyIHJlcXVpcnMgZGlhZ3JhbS12aWV3Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBydWxlci5zZXRVbml0KHRoaXMuZ3JfdW5pdCk7XHJcbiAgICAgICAgcnVsZXIuc2V0RW5hYmxlR3VpZGVzKHRoaXMuZW5fZ3VpZGVzKTtcclxuICAgICAgICBydWxlci5zZXRQcm9qZWN0Um90YXRlZEJvdW5kcyh0aGlzLnByX2JvdW5kcyk7XHJcbiAgICAgICAgcnVsZXIuc2V0TmVnYXRlZFgodGhpcy5uZWdfeCk7XHJcbiAgICAgICAgcnVsZXIuc2V0TmVnYXRlZFkodGhpcy5uZWdfeSk7XHJcbiAgICAgICAgcnVsZXIuc2V0VmVydGljYWxTY2FsZVZpc2libGUodGhpcy52ZXJ0X3Zpc2libGUpO1xyXG4gICAgICAgIHJ1bGVyLnNldEhvcml6b250YWxTY2FsZVZpc2libGUodGhpcy5ob3JfdmlzaWJsZSk7XHJcbiAgICAgICAgcnVsZXIuc2V0UG9pbnRlckNvbG9yKHRoaXMucG9pbnRlcl9jb2xvcik7XHJcbiAgICAgICAgcnVsZXIuc2V0VGV4dENvbG9yKHRoaXMudGV4dF9jb2xvcik7XHJcbiAgICAgICAgcnVsZXIuc2V0R3VpZGVDb2xvcih0aGlzLmd1aWRlX2NvbG9yKTtcclxuICAgICAgICBydWxlci5zZXRQcm9qZWN0aW9uQ29sb3IodGhpcy5wcm9qZWN0aW9uX2NvbG9yKTtcclxuICAgICAgICBydWxlci5zZXRCYWNrQ29sb3IodGhpcy5iYWNrX2NvbG9yKTtcclxuICAgICAgICBydWxlci5zZXRGb3JlQ29sb3IodGhpcy5mb3JlX0NvbG9yKTtcclxuXHJcblxyXG4gICAgfVxyXG5cclxufSJdfQ==