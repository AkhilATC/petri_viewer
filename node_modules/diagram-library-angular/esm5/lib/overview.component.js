import { __decorate } from "tslib";
import { Component, ViewChild, Input } from '@angular/core';
import * as MindFusion from 'diagram-library';
var Overview = /** @class */ (function () {
    function Overview() {
        this.enabled = true;
        this.allow_zoom = false;
        this.back_color = "#FFFFFF";
        this.scale_factor = 17.825311942959;
        this.auto_s_amount = 0;
        this.scale_mode = MindFusion.Diagramming.ScaleMode.FitAll;
    }
    Overview.prototype.ngAfterViewInit = function () {
        if (this.view_id === undefined)
            this.view_id = "overview";
        this.canvas.nativeElement.id = this.view_id;
        var overview = MindFusion.Diagramming.Overview.create(document.getElementById(this.view_id));
        overview.setDiagram(this.diagram);
        overview.setEnabled(this.enabled);
        overview.setAllowZoom(this.allow_zoom);
        overview.setScaleFactor(this.scale_factor);
        overview.setAutoScrollAmount(this.auto_s_amount);
        overview.setScaleMode(this.scale_mode);
        overview.setBackColor(this.back_color);
    };
    __decorate([
        ViewChild('overview', { static: true })
    ], Overview.prototype, "canvas", void 0);
    __decorate([
        Input('id')
    ], Overview.prototype, "view_id", void 0);
    __decorate([
        Input('diagram')
    ], Overview.prototype, "diagram", void 0);
    __decorate([
        Input('enabled')
    ], Overview.prototype, "enabled", void 0);
    __decorate([
        Input('allowZoom')
    ], Overview.prototype, "allow_zoom", void 0);
    __decorate([
        Input('backColor')
    ], Overview.prototype, "back_color", void 0);
    __decorate([
        Input('scaleFactor')
    ], Overview.prototype, "scale_factor", void 0);
    __decorate([
        Input('autoScrollAmount')
    ], Overview.prototype, "auto_s_amount", void 0);
    __decorate([
        Input('scaleMode')
    ], Overview.prototype, "scale_mode", void 0);
    Overview = __decorate([
        Component({
            selector: 'overview',
            template: "<div style=\" width: 200px; height: 200px; \">\n                 <canvas #overview width=\"200\" height=\"200\"></canvas>\n               </div>"
        })
    ], Overview);
    return Overview;
}());
export { Overview };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcnZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vZGlhZ3JhbS1saWJyYXJ5LWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvb3ZlcnZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFpQixTQUFTLEVBQWMsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQ3RGLE9BQU8sS0FBSyxVQUFVLE1BQU0saUJBQWlCLENBQUM7QUFXOUM7SUFBQTtRQU1zQixZQUFPLEdBQVksSUFBSSxDQUFDO1FBQ3RCLGVBQVUsR0FBWSxLQUFLLENBQUM7UUFDNUIsZUFBVSxHQUFXLFNBQVMsQ0FBQztRQUM3QixpQkFBWSxHQUFXLGVBQWUsQ0FBQztRQUNsQyxrQkFBYSxHQUFXLENBQUMsQ0FBQztRQUNqQyxlQUFVLEdBQXFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQWtCL0csQ0FBQztJQWhCRyxrQ0FBZSxHQUFmO1FBRUksSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVM7WUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUM7UUFFOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDNUMsSUFBSSxRQUFRLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDN0YsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDM0MsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNqRCxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2QyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUUzQyxDQUFDO0lBekJ3QztRQUF4QyxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzRDQUF1QztJQUNsRTtRQUFaLEtBQUssQ0FBQyxJQUFJLENBQUM7NkNBQWlCO0lBQ1g7UUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs2Q0FBa0I7SUFDakI7UUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs2Q0FBeUI7SUFDdEI7UUFBbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQztnREFBNkI7SUFDNUI7UUFBbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQztnREFBZ0M7SUFDN0I7UUFBckIsS0FBSyxDQUFDLGFBQWEsQ0FBQztrREFBd0M7SUFDbEM7UUFBMUIsS0FBSyxDQUFDLGtCQUFrQixDQUFDO21EQUEyQjtJQUNqQztRQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDO2dEQUF3RjtJQVhsRyxRQUFRO1FBUHBCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFFBQVEsRUFBRSxrSkFFUTtTQUVyQixDQUFDO09BQ1csUUFBUSxDQTZCcEI7SUFBRCxlQUFDO0NBQUEsQUE3QkQsSUE2QkM7U0E3QlksUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQWZ0ZXJWaWV3SW5pdCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCAqIGFzIE1pbmRGdXNpb24gZnJvbSAnZGlhZ3JhbS1saWJyYXJ5JztcclxuaW1wb3J0IERpYWdyYW0gPSBNaW5kRnVzaW9uLkRpYWdyYW1taW5nLkRpYWdyYW07XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ292ZXJ2aWV3JyxcclxuICAgIHRlbXBsYXRlOiBgPGRpdiBzdHlsZT1cIiB3aWR0aDogMjAwcHg7IGhlaWdodDogMjAwcHg7IFwiPlxyXG4gICAgICAgICAgICAgICAgIDxjYW52YXMgI292ZXJ2aWV3IHdpZHRoPVwiMjAwXCIgaGVpZ2h0PVwiMjAwXCI+PC9jYW52YXM+XHJcbiAgICAgICAgICAgICAgIDwvZGl2PmBcclxuXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBPdmVydmlldyBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG5cclxuXHJcbiAgICBAVmlld0NoaWxkKCdvdmVydmlldycsIHsgc3RhdGljOiB0cnVlIH0pIGNhbnZhczogRWxlbWVudFJlZjxIVE1MQ2FudmFzRWxlbWVudD47XHJcbiAgICBASW5wdXQoJ2lkJykgdmlld19pZDogc3RyaW5nO1xyXG4gICAgQElucHV0KCdkaWFncmFtJykgZGlhZ3JhbTogRGlhZ3JhbTtcclxuICAgIEBJbnB1dCgnZW5hYmxlZCcpIGVuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgQElucHV0KCdhbGxvd1pvb20nKSBhbGxvd196b29tOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBASW5wdXQoJ2JhY2tDb2xvcicpIGJhY2tfY29sb3I6IHN0cmluZyA9IFwiI0ZGRkZGRlwiO1xyXG4gICAgQElucHV0KCdzY2FsZUZhY3RvcicpIHNjYWxlX2ZhY3RvcjogbnVtYmVyID0gMTcuODI1MzExOTQyOTU5O1xyXG4gICAgQElucHV0KCdhdXRvU2Nyb2xsQW1vdW50JykgYXV0b19zX2Ftb3VudDogbnVtYmVyID0gMDtcclxuICAgIEBJbnB1dCgnc2NhbGVNb2RlJykgc2NhbGVfbW9kZTogTWluZEZ1c2lvbi5EaWFncmFtbWluZy5TY2FsZU1vZGUgPSBNaW5kRnVzaW9uLkRpYWdyYW1taW5nLlNjYWxlTW9kZS5GaXRBbGw7XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG5cclxuICAgICAgICBpZiAodGhpcy52aWV3X2lkID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMudmlld19pZCA9IFwib3ZlcnZpZXdcIjtcclxuXHJcbiAgICAgICAgdGhpcy5jYW52YXMubmF0aXZlRWxlbWVudC5pZCA9IHRoaXMudmlld19pZDtcclxuICAgICAgICB2YXIgb3ZlcnZpZXcgPSBNaW5kRnVzaW9uLkRpYWdyYW1taW5nLk92ZXJ2aWV3LmNyZWF0ZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnZpZXdfaWQpKTtcclxuICAgICAgICBvdmVydmlldy5zZXREaWFncmFtKHRoaXMuZGlhZ3JhbSk7XHJcbiAgICAgICAgb3ZlcnZpZXcuc2V0RW5hYmxlZCh0aGlzLmVuYWJsZWQpO1xyXG4gICAgICAgIG92ZXJ2aWV3LnNldEFsbG93Wm9vbSh0aGlzLmFsbG93X3pvb20pO1xyXG4gICAgICAgIG92ZXJ2aWV3LnNldFNjYWxlRmFjdG9yKHRoaXMuc2NhbGVfZmFjdG9yKTtcclxuICAgICAgICBvdmVydmlldy5zZXRBdXRvU2Nyb2xsQW1vdW50KHRoaXMuYXV0b19zX2Ftb3VudCk7XHJcbiAgICAgICAgb3ZlcnZpZXcuc2V0U2NhbGVNb2RlKHRoaXMuc2NhbGVfbW9kZSk7XHJcbiAgICAgICAgb3ZlcnZpZXcuc2V0QmFja0NvbG9yKHRoaXMuYmFja19jb2xvcik7XHJcblxyXG4gICAgfVxyXG59XHJcbiJdfQ==